
full-board-L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004acc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca0  08004ca0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca8  08004ca8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca8  08004ca8  00014ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  2000000c  08004cbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08004cbc  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018155  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fc5  00000000  00000000  00038191  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  0003b158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001330  00000000  00000000  0003c620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d78  00000000  00000000  0003d950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001261c  00000000  00000000  000606c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdce7  00000000  00000000  00072ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001409cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005610  00000000  00000000  00140a48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004c40 	.word	0x08004c40

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004c40 	.word	0x08004c40

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <ad5391_Reset_Board>:


/**
 * Sends a negative RESET pulse to the AD5391 and MCP23017 circuits.
 */
static void ad5391_Reset_Board(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0

	DAC_RST_GPIO_Port->BRR = (uint32_t)(DAC_RST_Pin); // lower RST
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <ad5391_Reset_Board+0x20>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(1); // wait at leat 270us
 80004d6:	2001      	movs	r0, #1
 80004d8:	f001 f9a0 	bl	800181c <HAL_Delay>
	DAC_RST_GPIO_Port->BSRR = (uint32_t)DAC_RST_Pin; // raise RST again
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <ad5391_Reset_Board+0x20>)
 80004de:	2201      	movs	r2, #1
 80004e0:	619a      	str	r2, [r3, #24]
	HAL_Delay(1); // necessary?
 80004e2:	2001      	movs	r0, #1
 80004e4:	f001 f99a 	bl	800181c <HAL_Delay>

}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	48000400 	.word	0x48000400

080004f0 <ad5391_Write_Dma>:
//
// DB11 DB10 DB9 DB8 . DB7 DB6 DB5 DB4 . DB3 DB2 DB1 DB0
//
// uint8_t txDAC5391_WRITECHANNEL[3] = {0x00, 0xC0, 0x00};
//
static void ad5391_Write_Dma(uint32_t word, uint32_t channel){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]

	// send SYNC pulse (approx 600ns negative pulse, minimum duration in datasheet is 33ns so that's perfectly safe):
	DAC_SYNC_GPIO_Port->BRR = DAC_SYNC_Pin; // lower SYNC
 80004fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004fe:	2208      	movs	r2, #8
 8000500:	629a      	str	r2, [r3, #40]	; 0x28

	txDAC5391Buff[0] = channel & 0x0F;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	b2db      	uxtb	r3, r3
 8000506:	f003 030f 	and.w	r3, r3, #15
 800050a:	b2da      	uxtb	r2, r3
 800050c:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <ad5391_Write_Dma+0x98>)
 800050e:	701a      	strb	r2, [r3, #0]
	txDAC5391Buff[1] = 0xC0 | ((word & 0xFC0) >> 6U);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	099b      	lsrs	r3, r3, #6
 8000514:	b2db      	uxtb	r3, r3
 8000516:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <ad5391_Write_Dma+0x98>)
 800051e:	705a      	strb	r2, [r3, #1]
	txDAC5391Buff[2] = ((word & 0x03F) << 2U);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <ad5391_Write_Dma+0x98>)
 800052a:	709a      	strb	r2, [r3, #2]

	DAC_SYNC_GPIO_Port->BSRR = DAC_SYNC_Pin; // raise SYNC (takes 560ns @ 80MHz)
 800052c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000530:	2208      	movs	r2, #8
 8000532:	619a      	str	r2, [r3, #24]

	//HAL_SPI_Transmit(&hspi1, txDAC5391, 3, 100); (debug)

	// trigger DMA transfer:
	__HAL_DMA_DISABLE(hdma_Dac_tx);
 8000534:	4b15      	ldr	r3, [pc, #84]	; (800058c <ad5391_Write_Dma+0x9c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <ad5391_Write_Dma+0x9c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f022 0201 	bic.w	r2, r2, #1
 8000546:	601a      	str	r2, [r3, #0]
	hdma_Dac_tx->Instance->CNDTR = 3; // 24 bits ; re-writing to CNDTR is enough to "restart" DMA request, see L4 or F4 datasheet
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <ad5391_Write_Dma+0x9c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2203      	movs	r2, #3
 8000550:	605a      	str	r2, [r3, #4]
	__HAL_DMA_ENABLE(hdma_Dac_tx);
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <ad5391_Write_Dma+0x9c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <ad5391_Write_Dma+0x9c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f042 0201 	orr.w	r2, r2, #1
 8000564:	601a      	str	r2, [r3, #0]
	SET_BIT(hspi_Dac->Instance->CR2, SPI_CR2_TXDMAEN); // re-enable Tx DMA request
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <ad5391_Write_Dma+0xa0>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	685a      	ldr	r2, [r3, #4]
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <ad5391_Write_Dma+0xa0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f042 0202 	orr.w	r2, r2, #2
 8000578:	605a      	str	r2, [r3, #4]

}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000444 	.word	0x20000444
 800058c:	20000598 	.word	0x20000598
 8000590:	200004e8 	.word	0x200004e8

08000594 <ad5391_TIM_IRQ>:
 * DAC IRQ handler that's fit for any timer.
 * Beware: at 5Mbits/s, a complete 24 bit transfer takes 5us and then
 * the busy signal goes low for 600ns hence minimum timer period must be above 6us.
 *
 */
void ad5391_TIM_IRQ(){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

	//LD3_GPIO_Port->BRR = LD3_Pin; // debug
	if (dac==0) dac=1;
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <ad5391_TIM_IRQ+0x40>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d103      	bne.n	80005a8 <ad5391_TIM_IRQ+0x14>
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <ad5391_TIM_IRQ+0x40>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	e002      	b.n	80005ae <ad5391_TIM_IRQ+0x1a>
	else dac=0;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <ad5391_TIM_IRQ+0x40>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]

	ad5391_Write_Dma(x, dac);
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <ad5391_TIM_IRQ+0x44>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <ad5391_TIM_IRQ+0x40>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4619      	mov	r1, r3
 80005b8:	4610      	mov	r0, r2
 80005ba:	f7ff ff99 	bl	80004f0 <ad5391_Write_Dma>

	t++; // debug
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <ad5391_TIM_IRQ+0x48>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	4a05      	ldr	r2, [pc, #20]	; (80005dc <ad5391_TIM_IRQ+0x48>)
 80005c6:	6013      	str	r3, [r2, #0]
	xIsValid = 0; // debug
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <ad5391_TIM_IRQ+0x4c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]

	//LD3_GPIO_Port->BSRR = LD3_Pin; // debug
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000448 	.word	0x20000448
 80005d8:	2000043c 	.word	0x2000043c
 80005dc:	20000434 	.word	0x20000434
 80005e0:	20000447 	.word	0x20000447

080005e4 <test_MCP23017>:
 * 		For instance, write to register GPIOA :
 * 		START | 0x40 0x00 | ACK | Register addr 0x12 | ACK | Register value | STOP
 *
 */

void test_MCP23017(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af02      	add	r7, sp, #8

	uint8_t configBuff[2];

	ad5391_Reset_Board();
 80005ea:	f7ff ff6f 	bl	80004cc <ad5391_Reset_Board>

	// Set IODIRA and IODIRB as output ports:

	configBuff[0] = MCP23017_REG_IODIRA; // Register address
 80005ee:	2300      	movs	r3, #0
 80005f0:	713b      	strb	r3, [r7, #4]
	configBuff[1] = MCP23017_IODIR_ALL_OUTPUT; // Value
 80005f2:	2300      	movs	r3, #0
 80005f4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(hi2c_MCP23017, MCP23017_ADDRESS, configBuff, 2, 100); // blocking call
 80005f6:	4b31      	ldr	r3, [pc, #196]	; (80006bc <test_MCP23017+0xd8>)
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	1d3a      	adds	r2, r7, #4
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2302      	movs	r3, #2
 8000602:	2140      	movs	r1, #64	; 0x40
 8000604:	f001 fd20 	bl	8002048 <HAL_I2C_Master_Transmit>

	configBuff[0] = MCP23017_REG_IODIRB;
 8000608:	2301      	movs	r3, #1
 800060a:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c_MCP23017, MCP23017_ADDRESS, configBuff, 2, 100); // blocking call
 800060c:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <test_MCP23017+0xd8>)
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	1d3a      	adds	r2, r7, #4
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2302      	movs	r3, #2
 8000618:	2140      	movs	r1, #64	; 0x40
 800061a:	f001 fd15 	bl	8002048 <HAL_I2C_Master_Transmit>

	mcp23017_gpioA_tx_Buff[0] = MCP23017_REG_GPIOA;
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <test_MCP23017+0xdc>)
 8000620:	2212      	movs	r2, #18
 8000622:	701a      	strb	r2, [r3, #0]
	mcp23017_gpioB_tx_Buff[0] = MCP23017_REG_GPIOB;
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <test_MCP23017+0xe0>)
 8000626:	2213      	movs	r2, #19
 8000628:	701a      	strb	r2, [r3, #0]

	// init DMA transfer for DMA1 Channel2 (I2C3):

	__HAL_DMA_DISABLE(hdma_MCP23017_tx);
 800062a:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <test_MCP23017+0xe4>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <test_MCP23017+0xe4>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f022 0201 	bic.w	r2, r2, #1
 800063c:	601a      	str	r2, [r3, #0]
    hdma_MCP23017_tx->DmaBaseAddress->IFCR = DMA_ISR_GIF2; // clear interrupt flag
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <test_MCP23017+0xe4>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	2210      	movs	r2, #16
 8000646:	605a      	str	r2, [r3, #4]
    hdma_MCP23017_tx->Instance->CNDTR = 2; /* Configure DMA Channel data length */
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <test_MCP23017+0xe4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2202      	movs	r2, #2
 8000650:	605a      	str	r2, [r3, #4]
    hdma_MCP23017_tx->Instance->CPAR = (uint32_t)&(hi2c_MCP23017->Instance->TXDR);
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <test_MCP23017+0xd8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <test_MCP23017+0xe4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	609a      	str	r2, [r3, #8]
    __HAL_DMA_DISABLE_IT(hdma_MCP23017_tx, DMA_IT_HT | DMA_IT_TC | DMA_IT_TE); // no IT
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <test_MCP23017+0xe4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <test_MCP23017+0xe4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f022 020e 	bic.w	r2, r2, #14
 8000676:	601a      	str	r2, [r3, #0]
  	//LD3_GPIO_Port->BSRR = LD3_Pin; // debug


	while (1){

		mcp23017_gpioA_tx_Buff[1]=0xFF;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <test_MCP23017+0xdc>)
 800067a:	22ff      	movs	r2, #255	; 0xff
 800067c:	705a      	strb	r2, [r3, #1]
		mcp23017_write_gpioA_dma();
 800067e:	f000 f825 	bl	80006cc <mcp23017_write_gpioA_dma>
		HAL_Delay(1);
 8000682:	2001      	movs	r0, #1
 8000684:	f001 f8ca 	bl	800181c <HAL_Delay>

		mcp23017_gpioA_tx_Buff[1]=0x00;
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <test_MCP23017+0xdc>)
 800068a:	2200      	movs	r2, #0
 800068c:	705a      	strb	r2, [r3, #1]
		mcp23017_write_gpioA_dma();
 800068e:	f000 f81d 	bl	80006cc <mcp23017_write_gpioA_dma>
		HAL_Delay(1);
 8000692:	2001      	movs	r0, #1
 8000694:	f001 f8c2 	bl	800181c <HAL_Delay>

		mcp23017_gpioB_tx_Buff[1]=0xFF;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <test_MCP23017+0xe0>)
 800069a:	22ff      	movs	r2, #255	; 0xff
 800069c:	705a      	strb	r2, [r3, #1]
		mcp23017_write_gpioB_dma();
 800069e:	f000 f85b 	bl	8000758 <mcp23017_write_gpioB_dma>
		HAL_Delay(1);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f001 f8ba 	bl	800181c <HAL_Delay>

		mcp23017_gpioB_tx_Buff[1]=0x00;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <test_MCP23017+0xe0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	705a      	strb	r2, [r3, #1]
		mcp23017_write_gpioB_dma();
 80006ae:	f000 f853 	bl	8000758 <mcp23017_write_gpioB_dma>
		HAL_Delay(1);
 80006b2:	2001      	movs	r0, #1
 80006b4:	f001 f8b2 	bl	800181c <HAL_Delay>
		mcp23017_gpioA_tx_Buff[1]=0xFF;
 80006b8:	e7de      	b.n	8000678 <test_MCP23017+0x94>
 80006ba:	bf00      	nop
 80006bc:	200004e4 	.word	0x200004e4
 80006c0:	20000438 	.word	0x20000438
 80006c4:	20000440 	.word	0x20000440
 80006c8:	20000494 	.word	0x20000494

080006cc <mcp23017_write_gpioA_dma>:
	}
}

void mcp23017_write_gpioA_dma(){
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

	__HAL_DMA_DISABLE(hdma_MCP23017_tx);
 80006d0:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <mcp23017_write_gpioA_dma+0x78>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <mcp23017_write_gpioA_dma+0x78>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f022 0201 	bic.w	r2, r2, #1
 80006e2:	601a      	str	r2, [r3, #0]
    hdma_MCP23017_tx->Instance->CNDTR = 2;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <mcp23017_write_gpioA_dma+0x78>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2202      	movs	r2, #2
 80006ec:	605a      	str	r2, [r3, #4]
    hdma_MCP23017_tx->Instance->CMAR = (uint32_t)mcp23017_gpioA_tx_Buff;
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <mcp23017_write_gpioA_dma+0x78>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a14      	ldr	r2, [pc, #80]	; (8000748 <mcp23017_write_gpioA_dma+0x7c>)
 80006f6:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE(hdma_MCP23017_tx);
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <mcp23017_write_gpioA_dma+0x78>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <mcp23017_write_gpioA_dma+0x78>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f042 0201 	orr.w	r2, r2, #1
 800070a:	601a      	str	r2, [r3, #0]

    // send slave address:
  	MODIFY_REG(hi2c_MCP23017->Instance->CR2,
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <mcp23017_write_gpioA_dma+0x80>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <mcp23017_write_gpioA_dma+0x84>)
 8000716:	401a      	ands	r2, r3
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <mcp23017_write_gpioA_dma+0x80>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	6819      	ldr	r1, [r3, #0]
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <mcp23017_write_gpioA_dma+0x88>)
 8000720:	4313      	orrs	r3, r2
 8000722:	604b      	str	r3, [r1, #4]
  			  ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
			  (uint32_t)(((uint32_t)MCP23017_ADDRESS & I2C_CR2_SADD) | (((uint32_t)2 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)I2C_GENERATE_START_WRITE));

  	// send data:
  	hi2c_MCP23017->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <mcp23017_write_gpioA_dma+0x80>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <mcp23017_write_gpioA_dma+0x80>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000736:	601a      	str	r2, [r3, #0]
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000494 	.word	0x20000494
 8000748:	20000438 	.word	0x20000438
 800074c:	200004e4 	.word	0x200004e4
 8000750:	7c009800 	.word	0x7c009800
 8000754:	82022040 	.word	0x82022040

08000758 <mcp23017_write_gpioB_dma>:

void mcp23017_write_gpioB_dma(){
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

	__HAL_DMA_DISABLE(hdma_MCP23017_tx);
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <mcp23017_write_gpioB_dma+0x78>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <mcp23017_write_gpioB_dma+0x78>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f022 0201 	bic.w	r2, r2, #1
 800076e:	601a      	str	r2, [r3, #0]
    hdma_MCP23017_tx->Instance->CNDTR = 2;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <mcp23017_write_gpioB_dma+0x78>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2202      	movs	r2, #2
 8000778:	605a      	str	r2, [r3, #4]
    hdma_MCP23017_tx->Instance->CMAR = (uint32_t)mcp23017_gpioB_tx_Buff;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <mcp23017_write_gpioB_dma+0x78>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <mcp23017_write_gpioB_dma+0x7c>)
 8000782:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE(hdma_MCP23017_tx);
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <mcp23017_write_gpioB_dma+0x78>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <mcp23017_write_gpioB_dma+0x78>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f042 0201 	orr.w	r2, r2, #1
 8000796:	601a      	str	r2, [r3, #0]

    // send slave address:
  	MODIFY_REG(hi2c_MCP23017->Instance->CR2,
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <mcp23017_write_gpioB_dma+0x80>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <mcp23017_write_gpioB_dma+0x84>)
 80007a2:	401a      	ands	r2, r3
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <mcp23017_write_gpioB_dma+0x80>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	6819      	ldr	r1, [r3, #0]
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <mcp23017_write_gpioB_dma+0x88>)
 80007ac:	4313      	orrs	r3, r2
 80007ae:	604b      	str	r3, [r1, #4]
  			  ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(I2C_GENERATE_START_WRITE >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
			  (uint32_t)(((uint32_t)MCP23017_ADDRESS & I2C_CR2_SADD) | (((uint32_t)2 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)I2C_AUTOEND_MODE | (uint32_t)I2C_GENERATE_START_WRITE));

  	// send data:
  	hi2c_MCP23017->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <mcp23017_write_gpioB_dma+0x80>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <mcp23017_write_gpioB_dma+0x80>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007c2:	601a      	str	r2, [r3, #0]


}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	20000494 	.word	0x20000494
 80007d4:	20000440 	.word	0x20000440
 80007d8:	200004e4 	.word	0x200004e4
 80007dc:	7c009800 	.word	0x7c009800
 80007e0:	82022040 	.word	0x82022040

080007e4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_DMA_Init+0x58>)
 80007ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <MX_DMA_Init+0x58>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6493      	str	r3, [r2, #72]	; 0x48
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_DMA_Init+0x58>)
 80007f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	200c      	movs	r0, #12
 8000808:	f001 f905 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800080c:	200c      	movs	r0, #12
 800080e:	f001 f91e 	bl	8001a4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	200d      	movs	r0, #13
 8000818:	f001 f8fd 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800081c:	200d      	movs	r0, #13
 800081e:	f001 f916 	bl	8001a4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2011      	movs	r0, #17
 8000828:	f001 f8f5 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800082c:	2011      	movs	r0, #17
 800082e:	f001 f90e 	bl	8001a4e <HAL_NVIC_EnableIRQ>

}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000

08000840 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b46      	ldr	r3, [pc, #280]	; (8000970 <MX_GPIO_Init+0x130>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a45      	ldr	r2, [pc, #276]	; (8000970 <MX_GPIO_Init+0x130>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b43      	ldr	r3, [pc, #268]	; (8000970 <MX_GPIO_Init+0x130>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b40      	ldr	r3, [pc, #256]	; (8000970 <MX_GPIO_Init+0x130>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a3f      	ldr	r2, [pc, #252]	; (8000970 <MX_GPIO_Init+0x130>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b3d      	ldr	r3, [pc, #244]	; (8000970 <MX_GPIO_Init+0x130>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b3a      	ldr	r3, [pc, #232]	; (8000970 <MX_GPIO_Init+0x130>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a39      	ldr	r2, [pc, #228]	; (8000970 <MX_GPIO_Init+0x130>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b37      	ldr	r3, [pc, #220]	; (8000970 <MX_GPIO_Init+0x130>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC_SYNC_Pin|DAC_LDAC_Pin, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	2128      	movs	r1, #40	; 0x28
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a6:	f001 fb27 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_RST_GPIO_Port, DAC_RST_Pin, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2101      	movs	r1, #1
 80008ae:	4831      	ldr	r0, [pc, #196]	; (8000974 <MX_GPIO_Init+0x134>)
 80008b0:	f001 fb22 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	210a      	movs	r1, #10
 80008b8:	482e      	ldr	r0, [pc, #184]	; (8000974 <MX_GPIO_Init+0x134>)
 80008ba:	f001 fb1d 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin|DAC_LDAC_Pin;
 80008be:	2328      	movs	r3, #40	; 0x28
 80008c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	4619      	mov	r1, r3
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f001 f98c 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_RST_Pin;
 80008dc:	2301      	movs	r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e8:	2302      	movs	r3, #2
 80008ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_RST_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	4619      	mov	r1, r3
 80008f2:	4820      	ldr	r0, [pc, #128]	; (8000974 <MX_GPIO_Init+0x134>)
 80008f4:	f001 f97e 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 80008f8:	230a      	movs	r3, #10
 80008fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4619      	mov	r1, r3
 800090e:	4819      	ldr	r0, [pc, #100]	; (8000974 <MX_GPIO_Init+0x134>)
 8000910:	f001 f970 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTI11_SW2_Pin;
 8000914:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_GPIO_Init+0x138>)
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EXTI11_SW2_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4619      	mov	r1, r3
 8000928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092c:	f001 f962 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTI5_SW1_Pin;
 8000930:	2320      	movs	r3, #32
 8000932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_GPIO_Init+0x138>)
 8000936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EXTI5_SW1_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	4619      	mov	r1, r3
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_GPIO_Init+0x134>)
 8000944:	f001 f956 	bl	8001bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	2017      	movs	r0, #23
 800094e:	f001 f862 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000952:	2017      	movs	r0, #23
 8000954:	f001 f87b 	bl	8001a4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2028      	movs	r0, #40	; 0x28
 800095e:	f001 f85a 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000962:	2028      	movs	r0, #40	; 0x28
 8000964:	f001 f873 	bl	8001a4e <HAL_NVIC_EnableIRQ>

}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000
 8000974:	48000400 	.word	0x48000400
 8000978:	10310000 	.word	0x10310000

0800097c <MX_I2C3_Init>:
I2C_HandleTypeDef hi2c3;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_I2C3_Init+0x7c>)
 8000982:	4a1e      	ldr	r2, [pc, #120]	; (80009fc <MX_I2C3_Init+0x80>)
 8000984:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300F33;
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_I2C3_Init+0x7c>)
 8000988:	4a1d      	ldr	r2, [pc, #116]	; (8000a00 <MX_I2C3_Init+0x84>)
 800098a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_I2C3_Init+0x7c>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_I2C3_Init+0x7c>)
 8000994:	2201      	movs	r2, #1
 8000996:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_I2C3_Init+0x7c>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_I2C3_Init+0x7c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_I2C3_Init+0x7c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_I2C3_Init+0x7c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_I2C3_Init+0x7c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009b6:	4810      	ldr	r0, [pc, #64]	; (80009f8 <MX_I2C3_Init+0x7c>)
 80009b8:	f001 fab6 	bl	8001f28 <HAL_I2C_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80009c2:	f000 f947 	bl	8000c54 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	480b      	ldr	r0, [pc, #44]	; (80009f8 <MX_I2C3_Init+0x7c>)
 80009ca:	f001 fda5 	bl	8002518 <HAL_I2CEx_ConfigAnalogFilter>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009d4:	f000 f93e 	bl	8000c54 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	4807      	ldr	r0, [pc, #28]	; (80009f8 <MX_I2C3_Init+0x7c>)
 80009dc:	f001 fde7 	bl	80025ae <HAL_I2CEx_ConfigDigitalFilter>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80009e6:	f000 f935 	bl	8000c54 <Error_Handler>
  }
  /** I2C Fast mode Plus enable 
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80009ea:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80009ee:	f001 fe2b 	bl	8002648 <HAL_I2CEx_EnableFastModePlus>

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000498 	.word	0x20000498
 80009fc:	40005c00 	.word	0x40005c00
 8000a00:	00300f33 	.word	0x00300f33

08000a04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a3d      	ldr	r2, [pc, #244]	; (8000b18 <HAL_I2C_MspInit+0x114>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d173      	bne.n	8000b0e <HAL_I2C_MspInit+0x10a>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b3d      	ldr	r3, [pc, #244]	; (8000b1c <HAL_I2C_MspInit+0x118>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a3c      	ldr	r2, [pc, #240]	; (8000b1c <HAL_I2C_MspInit+0x118>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b3a      	ldr	r3, [pc, #232]	; (8000b1c <HAL_I2C_MspInit+0x118>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <HAL_I2C_MspInit+0x118>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a36      	ldr	r2, [pc, #216]	; (8000b1c <HAL_I2C_MspInit+0x118>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <HAL_I2C_MspInit+0x118>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5a:	2312      	movs	r3, #18
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a66:	2304      	movs	r3, #4
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a74:	f001 f8be 	bl	8001bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a78:	2310      	movs	r3, #16
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7c:	2312      	movs	r3, #18
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	4823      	ldr	r0, [pc, #140]	; (8000b20 <HAL_I2C_MspInit+0x11c>)
 8000a94:	f001 f8ae 	bl	8001bf4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a98:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <HAL_I2C_MspInit+0x118>)
 8000a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9c:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <HAL_I2C_MspInit+0x118>)
 8000a9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <HAL_I2C_MspInit+0x118>)
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel2;
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <HAL_I2C_MspInit+0x120>)
 8000ab2:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_I2C_MspInit+0x124>)
 8000ab4:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_3;
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <HAL_I2C_MspInit+0x120>)
 8000ab8:	2203      	movs	r2, #3
 8000aba:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_I2C_MspInit+0x120>)
 8000abe:	2210      	movs	r2, #16
 8000ac0:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_I2C_MspInit+0x120>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_I2C_MspInit+0x120>)
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_I2C_MspInit+0x120>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_I2C_MspInit+0x120>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_I2C_MspInit+0x120>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_I2C_MspInit+0x120>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8000ae6:	480f      	ldr	r0, [pc, #60]	; (8000b24 <HAL_I2C_MspInit+0x120>)
 8000ae8:	f000 ffcc 	bl	8001a84 <HAL_DMA_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_I2C_MspInit+0xf2>
    {
      Error_Handler();
 8000af2:	f000 f8af 	bl	8000c54 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_I2C_MspInit+0x120>)
 8000afa:	639a      	str	r2, [r3, #56]	; 0x38
 8000afc:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <HAL_I2C_MspInit+0x120>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN I2C3_MspInit 1 */

    // init alias:
    hi2c_MCP23017 = &hi2c3;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_I2C_MspInit+0x128>)
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_I2C_MspInit+0x12c>)
 8000b06:	601a      	str	r2, [r3, #0]
    hdma_MCP23017_tx = &hdma_i2c3_tx;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_I2C_MspInit+0x130>)
 8000b0a:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <HAL_I2C_MspInit+0x120>)
 8000b0c:	601a      	str	r2, [r3, #0]

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40005c00 	.word	0x40005c00
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000400 	.word	0x48000400
 8000b24:	2000044c 	.word	0x2000044c
 8000b28:	4002001c 	.word	0x4002001c
 8000b2c:	200004e4 	.word	0x200004e4
 8000b30:	20000498 	.word	0x20000498
 8000b34:	20000494 	.word	0x20000494

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f000 fdfd 	bl	800173a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f818 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f7ff fe7c 	bl	8000840 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b48:	f7ff fe4c 	bl	80007e4 <MX_DMA_Init>
  MX_I2C3_Init();
 8000b4c:	f7ff ff16 	bl	800097c <MX_I2C3_Init>
  MX_SPI1_Init();
 8000b50:	f000 f888 	bl	8000c64 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000b54:	f000 fb64 	bl	8001220 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b58:	f000 fbee 	bl	8001338 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b5c:	f000 fca4 	bl	80014a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b60:	f000 fcd2 	bl	8001508 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  stlink_dma_init();
 8000b64:	f000 f938 	bl	8000dd8 <stlink_dma_init>
  //testSpiTransmit();
  //testSpiTransmitDMA();
  //testSpiTransmitDMA_ManualConfig();
  //testDAC5391();
  //test_AD5391_Dac_With_Tim();
  test_MCP23017();
 8000b68:	f7ff fd3c 	bl	80005e4 <test_MCP23017>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  HAL_Delay(100);
 8000b6c:	2064      	movs	r0, #100	; 0x64
 8000b6e:	f000 fe55 	bl	800181c <HAL_Delay>
 8000b72:	e7fb      	b.n	8000b6c <main+0x34>

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b0ac      	sub	sp, #176	; 0xb0
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b7e:	2244      	movs	r2, #68	; 0x44
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f004 f854 	bl	8004c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2254      	movs	r2, #84	; 0x54
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f004 f846 	bl	8004c30 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ba8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bac:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000bc0:	2314      	movs	r3, #20
 8000bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 fdb7 	bl	8002750 <HAL_RCC_OscConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000be8:	f000 f834 	bl	8000c54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bec:	230f      	movs	r3, #15
 8000bee:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c04:	2104      	movs	r1, #4
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 f9c2 	bl	8002f90 <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000c12:	f000 f81f 	bl	8000c54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000c16:	f240 1303 	movw	r3, #259	; 0x103
 8000c1a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 fbb4 	bl	8003398 <HAL_RCCEx_PeriphCLKConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c36:	f000 f80d 	bl	8000c54 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c3e:	f001 fd31 	bl	80026a4 <HAL_PWREx_ControlVoltageScaling>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000c48:	f000 f804 	bl	8000c54 <Error_Handler>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	37b0      	adds	r7, #176	; 0xb0
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <MX_SPI1_Init+0x78>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c86:	2202      	movs	r2, #2
 8000c88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c9a:	2218      	movs	r2, #24
 8000c9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000cb2:	2207      	movs	r2, #7
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000cc4:	f002 fe4a 	bl	800395c <HAL_SPI_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cce:	f7ff ffc1 	bl	8000c54 <Error_Handler>
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200004ec 	.word	0x200004ec
 8000cdc:	40013000 	.word	0x40013000

08000ce0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a2f      	ldr	r2, [pc, #188]	; (8000dbc <HAL_SPI_MspInit+0xdc>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d158      	bne.n	8000db4 <HAL_SPI_MspInit+0xd4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <HAL_SPI_MspInit+0xe0>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	4a2e      	ldr	r2, [pc, #184]	; (8000dc0 <HAL_SPI_MspInit+0xe0>)
 8000d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <HAL_SPI_MspInit+0xe0>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <HAL_SPI_MspInit+0xe0>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <HAL_SPI_MspInit+0xe0>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <HAL_SPI_MspInit+0xe0>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000d32:	f241 0302 	movw	r3, #4098	; 0x1002
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d44:	2305      	movs	r3, #5
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d52:	f000 ff4f 	bl	8001bf4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_SPI_MspInit+0xe4>)
 8000d58:	4a1b      	ldr	r2, [pc, #108]	; (8000dc8 <HAL_SPI_MspInit+0xe8>)
 8000d5a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_SPI_MspInit+0xe4>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_SPI_MspInit+0xe4>)
 8000d64:	2210      	movs	r2, #16
 8000d66:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_SPI_MspInit+0xe4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_SPI_MspInit+0xe4>)
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <HAL_SPI_MspInit+0xe4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_SPI_MspInit+0xe4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_SPI_MspInit+0xe4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_SPI_MspInit+0xe4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <HAL_SPI_MspInit+0xe4>)
 8000d8e:	f000 fe79 	bl	8001a84 <HAL_DMA_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000d98:	f7ff ff5c 	bl	8000c54 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <HAL_SPI_MspInit+0xe4>)
 8000da0:	655a      	str	r2, [r3, #84]	; 0x54
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_SPI_MspInit+0xe4>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

    // init aliases:
    hspi_Dac = &hspi1;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_SPI_MspInit+0xec>)
 8000daa:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <HAL_SPI_MspInit+0xf0>)
 8000dac:	601a      	str	r2, [r3, #0]
    hdma_Dac_tx = &hdma_spi1_tx;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_SPI_MspInit+0xf4>)
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_SPI_MspInit+0xe4>)
 8000db2:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40013000 	.word	0x40013000
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	20000550 	.word	0x20000550
 8000dc8:	40020030 	.word	0x40020030
 8000dcc:	200004e8 	.word	0x200004e8
 8000dd0:	200004ec 	.word	0x200004ec
 8000dd4:	20000598 	.word	0x20000598

08000dd8 <stlink_dma_init>:
static size_t tx_len; // variable to be shared among IRQ handler and dma_transmit()

/**
 *
 */
void stlink_dma_init(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

	// init buffer:
	memset(tx_buff, 0x00, TX_BUFF_SIZE);
 8000ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de0:	2100      	movs	r1, #0
 8000de2:	4820      	ldr	r0, [pc, #128]	; (8000e64 <stlink_dma_init+0x8c>)
 8000de4:	f003 ff24 	bl	8004c30 <memset>

	__HAL_DMA_DISABLE(hdma_STlink_tx);
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <stlink_dma_init+0x90>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <stlink_dma_init+0x90>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0201 	bic.w	r2, r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]

	// clear all interrupt flags for channel 7:
	hdma_STlink_tx->DmaBaseAddress->IFCR = DMA_ISR_GIF7;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <stlink_dma_init+0x90>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e06:	605a      	str	r2, [r3, #4]

	// program DMA transfer features: (so far only CPAR is set, CMAR and CNDTR will be later on)
	hdma_STlink_tx->Instance->CPAR = (uint32_t)&(huart_STlink->Instance->TDR); // set peripheral address to UART TDR register
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <stlink_dma_init+0x94>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <stlink_dma_init+0x90>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	609a      	str	r2, [r3, #8]

	// enable only TC (transfer complete) and TE (transfer error) interrupts for DMA channel:
	__HAL_DMA_DISABLE_IT(hdma_STlink_tx, DMA_IT_HT);
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <stlink_dma_init+0x90>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <stlink_dma_init+0x90>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0204 	bic.w	r2, r2, #4
 8000e2c:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(hdma_STlink_tx, (DMA_IT_TC | DMA_IT_TE));
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <stlink_dma_init+0x90>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <stlink_dma_init+0x90>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f042 020a 	orr.w	r2, r2, #10
 8000e40:	601a      	str	r2, [r3, #0]

	// make sure TC interrupt for UART ain't pending:
	__HAL_UART_CLEAR_FLAG(huart_STlink, UART_CLEAR_TCF);
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <stlink_dma_init+0x94>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2240      	movs	r2, #64	; 0x40
 8000e4a:	621a      	str	r2, [r3, #32]

	// Enable DMA-to-UART transmit request by setting the DMAT bit in the UART CR3 register:
	SET_BIT(huart_STlink->Instance->CR3, USART_CR3_DMAT);
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <stlink_dma_init+0x94>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <stlink_dma_init+0x94>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e5e:	609a      	str	r2, [r3, #8]

	// now to start the real transfer we'd just need to enable the DMA peripheral (see dma_transmit() below)

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000028 	.word	0x20000028
 8000e68:	200006f0 	.word	0x200006f0
 8000e6c:	20000624 	.word	0x20000624

08000e70 <stlink_dma_transmit>:
}

/**
 * Checks for data in buffer and starts transfer if not in progress
 */
void stlink_dma_transmit() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0

    /* If transfer is not on-going, ie EN=0 in CCR register */
    if ((hdma_STlink_tx->Instance->CCR &  DMA_CCR_EN) == 0U){
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <stlink_dma_transmit+0x60>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d120      	bne.n	8000ec8 <stlink_dma_transmit+0x58>



        tx_len = stlink_dma_buff_get_linear_block_read_length();
 8000e86:	f000 f8b1 	bl	8000fec <stlink_dma_buff_get_linear_block_read_length>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <stlink_dma_transmit+0x64>)
 8000e8e:	601a      	str	r2, [r3, #0]

        /* Limit maximal size to transmit at a time // SR: why ?*/
        //if (tx_len > 32) tx_len = 32;

        /* Anything to transmit? */
        if (tx_len > 0) {
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <stlink_dma_transmit+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d017      	beq.n	8000ec8 <stlink_dma_transmit+0x58>
        	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
            uint8_t* ptr = stlink_dma_buff_get_linear_block_read_address();
 8000e98:	f000 f898 	bl	8000fcc <stlink_dma_buff_get_linear_block_read_address>
 8000e9c:	6078      	str	r0, [r7, #4]

            /* Configure DMA */
        	hdma_STlink_tx->Instance->CNDTR = tx_len;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <stlink_dma_transmit+0x60>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <stlink_dma_transmit+0x64>)
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
        	hdma_STlink_tx->Instance->CMAR = (uint32_t)ptr;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <stlink_dma_transmit+0x60>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	60da      	str	r2, [r3, #12]

        	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);

            /* Start transfer */
        	__HAL_DMA_ENABLE(hdma_STlink_tx);
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <stlink_dma_transmit+0x60>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <stlink_dma_transmit+0x60>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]
        }


    }

}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200006f0 	.word	0x200006f0
 8000ed4:	20000430 	.word	0x20000430

08000ed8 <stlink_dma_irq_handler>:

/**
 * Transfer Complete interrupt handler
 */
void stlink_dma_irq_handler(){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0

	uint32_t flag_it = hdma_STlink_tx->DmaBaseAddress->ISR;
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <stlink_dma_irq_handler+0x50>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	607b      	str	r3, [r7, #4]
	//__HAL_DMA_DISABLE_IT(huartSTlink_dmatx, DMA_IT_TE | DMA_IT_TC | DMA_IT_HT);

	// if TC interrupt:

	/* Clear interrupt flags */
	if ((flag_it & DMA_FLAG_TC7) != 0U)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d005      	beq.n	8000efe <stlink_dma_irq_handler+0x26>
		hdma_STlink_tx->DmaBaseAddress->IFCR = DMA_ISR_GIF7; // DMA_ISR_TCIF7;
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <stlink_dma_irq_handler+0x50>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000efc:	605a      	str	r2, [r3, #4]

    // else TE interrupt:
	//else if (flag_it & DMA_FLAG_TE7 != 0U)...
	//hdma_uartSTlink_tx->DmaBaseAddress->IFCR = DMA_ISR_GIF7 // clear global flag

	__HAL_DMA_DISABLE(hdma_STlink_tx); // disable DMA so as to be able to reprogramm next transfer in stlink_dma_transmit()
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <stlink_dma_irq_handler+0x50>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <stlink_dma_irq_handler+0x50>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0201 	bic.w	r2, r2, #1
 8000f10:	601a      	str	r2, [r3, #0]

    stlink_dma_buff_skip(tx_len);/* Data sent, ignore these */
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <stlink_dma_irq_handler+0x54>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f80a 	bl	8000f30 <stlink_dma_buff_skip>

    stlink_dma_transmit();                   /* Try to send more data */
 8000f1c:	f7ff ffa8 	bl	8000e70 <stlink_dma_transmit>


}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200006f0 	.word	0x200006f0
 8000f2c:	20000430 	.word	0x20000430

08000f30 <stlink_dma_buff_skip>:
 * Marks data as read in the buffer and increases free memory for up to `len` bytes
 * Useful at the end of streaming transfer such as DMA
 * @param 	len: Number of bytes to skip and mark as read
 * @return  Number of bytes skipped
 */
int stlink_dma_buff_skip(size_t len) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

    int full = stlink_dma_buff_get_readable_size();       /* Get buffer used length */
 8000f38:	f000 f81e 	bl	8000f78 <stlink_dma_buff_get_readable_size>
 8000f3c:	60f8      	str	r0, [r7, #12]
    tx_buff_r += BUF_MIN(len, full);              /* Advance read pointer */
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	bf28      	it	cs
 8000f46:	461a      	movcs	r2, r3
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <stlink_dma_buff_skip+0x44>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <stlink_dma_buff_skip+0x44>)
 8000f50:	6013      	str	r3, [r2, #0]
    if (tx_buff_r >= TX_BUFF_SIZE) {                /* Subtract possible overflow */
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <stlink_dma_buff_skip+0x44>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f5a:	d305      	bcc.n	8000f68 <stlink_dma_buff_skip+0x38>
        tx_buff_r -= TX_BUFF_SIZE;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <stlink_dma_buff_skip+0x44>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000f64:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <stlink_dma_buff_skip+0x44>)
 8000f66:	6013      	str	r3, [r2, #0]
    }
    return len;
 8000f68:	687b      	ldr	r3, [r7, #4]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000428 	.word	0x20000428

08000f78 <stlink_dma_buff_get_readable_size>:

/**
 * Get number of bytes in tx_buff_data available to read
 */
int stlink_dma_buff_get_readable_size() {
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0

    size_t w, r, size;

    /* Use temporary values in case they are changed during operations */
    w = tx_buff_w;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <stlink_dma_buff_get_readable_size+0x4c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	60bb      	str	r3, [r7, #8]
    r = tx_buff_r;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <stlink_dma_buff_get_readable_size+0x50>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	607b      	str	r3, [r7, #4]
    if (w == r) {
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d102      	bne.n	8000f98 <stlink_dma_buff_get_readable_size+0x20>
        size = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	e00e      	b.n	8000fb6 <stlink_dma_buff_get_readable_size+0x3e>
    } else if (w > r) {
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d904      	bls.n	8000faa <stlink_dma_buff_get_readable_size+0x32>
        size = w - r;
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	e005      	b.n	8000fb6 <stlink_dma_buff_get_readable_size+0x3e>
    } else {
        size = TX_BUFF_SIZE - (r - w);
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fb4:	60fb      	str	r3, [r7, #12]
    }
    return size;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	2000042c 	.word	0x2000042c
 8000fc8:	20000428 	.word	0x20000428

08000fcc <stlink_dma_buff_get_linear_block_read_address>:
/**
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
uint8_t* stlink_dma_buff_get_linear_block_read_address() {
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

    return tx_buff + tx_buff_r;
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <stlink_dma_buff_get_linear_block_read_address+0x18>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <stlink_dma_buff_get_linear_block_read_address+0x1c>)
 8000fd6:	4413      	add	r3, r2
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000428 	.word	0x20000428
 8000fe8:	20000028 	.word	0x20000028

08000fec <stlink_dma_buff_get_linear_block_read_length>:
/**
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t stlink_dma_buff_get_linear_block_read_length() {
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0

    size_t w, r, len;

    /* Use temporary values in case they are changed during operations */
    w = tx_buff_w;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <stlink_dma_buff_get_linear_block_read_length+0x48>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	60bb      	str	r3, [r7, #8]
    r = tx_buff_r;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <stlink_dma_buff_get_linear_block_read_length+0x4c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	607b      	str	r3, [r7, #4]
    if (w > r) {
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	d904      	bls.n	8001010 <stlink_dma_buff_get_linear_block_read_length+0x24>
        len = w - r;
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e00a      	b.n	8001026 <stlink_dma_buff_get_linear_block_read_length+0x3a>
    } else if (r > w) {
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	429a      	cmp	r2, r3
 8001016:	d904      	bls.n	8001022 <stlink_dma_buff_get_linear_block_read_length+0x36>
        len = TX_BUFF_SIZE - r;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	e001      	b.n	8001026 <stlink_dma_buff_get_linear_block_read_length+0x3a>
    } else {
        len = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
    }
    return len;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	2000042c 	.word	0x2000042c
 8001038:	20000428 	.word	0x20000428

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_MspInit+0x44>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001046:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <HAL_MspInit+0x44>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6613      	str	r3, [r2, #96]	; 0x60
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_MspInit+0x44>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_MspInit+0x44>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_MspInit+0x44>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6593      	str	r3, [r2, #88]	; 0x58
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_MspInit+0x44>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <MemManage_Handler+0x4>

0800109e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <UsageFault_Handler+0x4>

080010aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d8:	f000 fb82 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

	hdma_MCP23017_tx->DmaBaseAddress->IFCR = DMA_ISR_GIF2; // clear interrupt flag
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <DMA1_Channel2_IRQHandler+0x2c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	2210      	movs	r2, #16
 80010ec:	605a      	str	r2, [r3, #4]
	hi2c_MCP23017->Instance->CR1 &= ~I2C_CR1_TXDMAEN; /* Disable DMA Request */
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <DMA1_Channel2_IRQHandler+0x30>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <DMA1_Channel2_IRQHandler+0x30>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001100:	601a      	str	r2, [r3, #0]
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_i2c3_tx);
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	20000494 	.word	0x20000494
 8001110:	200004e4 	.word	0x200004e4

08001114 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

	(&hdma_spi1_tx)->DmaBaseAddress->IFCR = DMA_ISR_GIF3; // clear interrupt flag
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <DMA1_Channel3_IRQHandler+0x18>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001120:	605a      	str	r2, [r3, #4]

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	20000550 	.word	0x20000550

08001130 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

	stlink_dma_irq_handler();
 8001134:	f7ff fed0 	bl	8000ed8 <stlink_dma_irq_handler>

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI5_SW1_Pin); // PB5 (SW1)
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <EXTI9_5_IRQHandler+0x24>)
 8001142:	2220      	movs	r2, #32
 8001144:	615a      	str	r2, [r3, #20]
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, HAL_GPIO_ReadPin(EXTI5_SW1_GPIO_Port, EXTI5_SW1_Pin));
 8001146:	2120      	movs	r1, #32
 8001148:	4806      	ldr	r0, [pc, #24]	; (8001164 <EXTI9_5_IRQHandler+0x28>)
 800114a:	f000 febd 	bl	8001ec8 <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	2108      	movs	r1, #8
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <EXTI9_5_IRQHandler+0x28>)
 8001156:	f000 fecf 	bl	8001ef8 <HAL_GPIO_WritePin>

  /* USER CODE END EXTI9_5_IRQn 0 */
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40010400 	.word	0x40010400
 8001164:	48000400 	.word	0x48000400

08001168 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <TIM2_IRQHandler+0x18>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f06f 0201 	mvn.w	r2, #1
 8001174:	611a      	str	r2, [r3, #16]
    ad5391_TIM_IRQ();
 8001176:	f7ff fa0d 	bl	8000594 <ad5391_TIM_IRQ>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200005e4 	.word	0x200005e4

08001184 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI11_SW2_Pin); // PA11 (SW2)
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <EXTI15_10_IRQHandler+0x28>)
 800118a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800118e:	615a      	str	r2, [r3, #20]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, HAL_GPIO_ReadPin(EXTI11_SW2_GPIO_Port, EXTI11_SW2_Pin));
 8001190:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001198:	f000 fe96 	bl	8001ec8 <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	2102      	movs	r1, #2
 80011a2:	4803      	ldr	r0, [pc, #12]	; (80011b0 <EXTI15_10_IRQHandler+0x2c>)
 80011a4:	f000 fea8 	bl	8001ef8 <HAL_GPIO_WritePin>

  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40010400 	.word	0x40010400
 80011b0:	48000400 	.word	0x48000400

080011b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <SystemInit+0x64>)
 80011ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011be:	4a16      	ldr	r2, [pc, #88]	; (8001218 <SystemInit+0x64>)
 80011c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <SystemInit+0x68>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a13      	ldr	r2, [pc, #76]	; (800121c <SystemInit+0x68>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <SystemInit+0x68>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <SystemInit+0x68>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <SystemInit+0x68>)
 80011e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <SystemInit+0x68>)
 80011ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <SystemInit+0x68>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <SystemInit+0x68>)
 80011f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <SystemInit+0x68>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SystemInit+0x64>)
 8001206:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800120a:	609a      	str	r2, [r3, #8]
#endif
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	40021000 	.word	0x40021000

08001220 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	; 0x30
 8001224:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 800124c:	4b38      	ldr	r3, [pc, #224]	; (8001330 <MX_TIM1_Init+0x110>)
 800124e:	4a39      	ldr	r2, [pc, #228]	; (8001334 <MX_TIM1_Init+0x114>)
 8001250:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001252:	4b37      	ldr	r3, [pc, #220]	; (8001330 <MX_TIM1_Init+0x110>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b35      	ldr	r3, [pc, #212]	; (8001330 <MX_TIM1_Init+0x110>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800125e:	4b34      	ldr	r3, [pc, #208]	; (8001330 <MX_TIM1_Init+0x110>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <MX_TIM1_Init+0x110>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126a:	4b31      	ldr	r3, [pc, #196]	; (8001330 <MX_TIM1_Init+0x110>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <MX_TIM1_Init+0x110>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001276:	482e      	ldr	r0, [pc, #184]	; (8001330 <MX_TIM1_Init+0x110>)
 8001278:	f002 fbfa 	bl	8003a70 <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001282:	f7ff fce7 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	4619      	mov	r1, r3
 8001292:	4827      	ldr	r0, [pc, #156]	; (8001330 <MX_TIM1_Init+0x110>)
 8001294:	f002 fce8 	bl	8003c68 <HAL_TIM_ConfigClockSource>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800129e:	f7ff fcd9 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80012a2:	4823      	ldr	r0, [pc, #140]	; (8001330 <MX_TIM1_Init+0x110>)
 80012a4:	f002 fc0f 	bl	8003ac6 <HAL_TIM_IC_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80012ae:	f7ff fcd1 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	481a      	ldr	r0, [pc, #104]	; (8001330 <MX_TIM1_Init+0x110>)
 80012c6:	f002 ff93 	bl	80041f0 <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80012d0:	f7ff fcc0 	bl	8000c54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012d8:	2301      	movs	r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <MX_TIM1_Init+0x110>)
 80012ec:	f002 fc20 	bl	8003b30 <HAL_TIM_IC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80012f6:	f7ff fcad 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2204      	movs	r2, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	480b      	ldr	r0, [pc, #44]	; (8001330 <MX_TIM1_Init+0x110>)
 8001302:	f002 fc15 	bl	8003b30 <HAL_TIM_IC_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800130c:	f7ff fca2 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2208      	movs	r2, #8
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <MX_TIM1_Init+0x110>)
 8001318:	f002 fc0a 	bl	8003b30 <HAL_TIM_IC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001322:	f7ff fc97 	bl	8000c54 <Error_Handler>
  }

}
 8001326:	bf00      	nop
 8001328:	3730      	adds	r7, #48	; 0x30
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200005a4 	.word	0x200005a4
 8001334:	40012c00 	.word	0x40012c00

08001338 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_TIM2_Init+0x94>)
 8001358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_TIM2_Init+0x94>)
 8001360:	2264      	movs	r2, #100	; 0x64
 8001362:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_TIM2_Init+0x94>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_TIM2_Init+0x94>)
 800136c:	2264      	movs	r2, #100	; 0x64
 800136e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_TIM2_Init+0x94>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_TIM2_Init+0x94>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800137c:	4813      	ldr	r0, [pc, #76]	; (80013cc <MX_TIM2_Init+0x94>)
 800137e:	f002 fb77 	bl	8003a70 <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001388:	f7ff fc64 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	4619      	mov	r1, r3
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <MX_TIM2_Init+0x94>)
 800139a:	f002 fc65 	bl	8003c68 <HAL_TIM_ConfigClockSource>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013a4:	f7ff fc56 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_TIM2_Init+0x94>)
 80013b6:	f002 ff1b 	bl	80041f0 <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013c0:	f7ff fc48 	bl	8000c54 <Error_Handler>
  }

}
 80013c4:	bf00      	nop
 80013c6:	3720      	adds	r7, #32
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200005e4 	.word	0x200005e4

080013d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a28      	ldr	r2, [pc, #160]	; (8001490 <HAL_TIM_Base_MspInit+0xc0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d12d      	bne.n	800144e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_TIM_Base_MspInit+0xc4>)
 80013f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f6:	4a27      	ldr	r2, [pc, #156]	; (8001494 <HAL_TIM_Base_MspInit+0xc4>)
 80013f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013fc:	6613      	str	r3, [r2, #96]	; 0x60
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <HAL_TIM_Base_MspInit+0xc4>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_TIM_Base_MspInit+0xc4>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a21      	ldr	r2, [pc, #132]	; (8001494 <HAL_TIM_Base_MspInit+0xc4>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <HAL_TIM_Base_MspInit+0xc4>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = TIM1_CH1_3340A_Pin|TIM1_CH2_3340B_Pin|TIM1_CH3_13700_Pin;
 8001422:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001434:	2301      	movs	r3, #1
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f000 fbd7 	bl	8001bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

    // init alias
	htimVcoCalib = &htim1;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_TIM_Base_MspInit+0xc8>)
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <HAL_TIM_Base_MspInit+0xcc>)
 800144a:	601a      	str	r2, [r3, #0]
    // init alias:
	htimDac = &htim2;

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800144c:	e01b      	b.n	8001486 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001456:	d116      	bne.n	8001486 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_TIM_Base_MspInit+0xc4>)
 800145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145c:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <HAL_TIM_Base_MspInit+0xc4>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6593      	str	r3, [r2, #88]	; 0x58
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_TIM_Base_MspInit+0xc4>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	201c      	movs	r0, #28
 8001476:	f000 face 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800147a:	201c      	movs	r0, #28
 800147c:	f000 fae7 	bl	8001a4e <HAL_NVIC_EnableIRQ>
	htimDac = &htim2;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_TIM_Base_MspInit+0xd0>)
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_TIM_Base_MspInit+0xd4>)
 8001484:	601a      	str	r2, [r3, #0]
}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	; 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40012c00 	.word	0x40012c00
 8001494:	40021000 	.word	0x40021000
 8001498:	200005a0 	.word	0x200005a0
 800149c:	200005a4 	.word	0x200005a4
 80014a0:	2000059c 	.word	0x2000059c
 80014a4:	200005e4 	.word	0x200005e4

080014a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_USART1_UART_Init+0x58>)
 80014ae:	4a15      	ldr	r2, [pc, #84]	; (8001504 <MX_USART1_UART_Init+0x5c>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <MX_USART1_UART_Init+0x58>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_USART1_UART_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_USART1_UART_Init+0x58>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_USART1_UART_Init+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_USART1_UART_Init+0x58>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_USART1_UART_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_USART1_UART_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_USART1_UART_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_USART1_UART_Init+0x58>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_USART1_UART_Init+0x58>)
 80014ec:	f002 fee6 	bl	80042bc <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014f6:	f7ff fbad 	bl	8000c54 <Error_Handler>
  }

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000670 	.word	0x20000670
 8001504:	40013800 	.word	0x40013800

08001508 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_USART2_UART_Init+0x58>)
 800150e:	4a15      	ldr	r2, [pc, #84]	; (8001564 <MX_USART2_UART_Init+0x5c>)
 8001510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <MX_USART2_UART_Init+0x58>)
 8001514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_USART2_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_USART2_UART_Init+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_USART2_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_USART2_UART_Init+0x58>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_USART2_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_USART2_UART_Init+0x58>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_USART2_UART_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_USART2_UART_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_USART2_UART_Init+0x58>)
 800154c:	f002 feb6 	bl	80042bc <HAL_UART_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001556:	f7ff fb7d 	bl	8000c54 <Error_Handler>
  }

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200006f4 	.word	0x200006f4
 8001564:	40004400 	.word	0x40004400

08001568 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	; 0x30
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a4f      	ldr	r2, [pc, #316]	; (80016c4 <HAL_UART_MspInit+0x15c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d128      	bne.n	80015dc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800158a:	4b4f      	ldr	r3, [pc, #316]	; (80016c8 <HAL_UART_MspInit+0x160>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158e:	4a4e      	ldr	r2, [pc, #312]	; (80016c8 <HAL_UART_MspInit+0x160>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6613      	str	r3, [r2, #96]	; 0x60
 8001596:	4b4c      	ldr	r3, [pc, #304]	; (80016c8 <HAL_UART_MspInit+0x160>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b49      	ldr	r3, [pc, #292]	; (80016c8 <HAL_UART_MspInit+0x160>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4a48      	ldr	r2, [pc, #288]	; (80016c8 <HAL_UART_MspInit+0x160>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4b46      	ldr	r3, [pc, #280]	; (80016c8 <HAL_UART_MspInit+0x160>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ba:	23c0      	movs	r3, #192	; 0xc0
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015ca:	2307      	movs	r3, #7
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	483d      	ldr	r0, [pc, #244]	; (80016cc <HAL_UART_MspInit+0x164>)
 80015d6:	f000 fb0d 	bl	8001bf4 <HAL_GPIO_Init>
	huart_STlink = &huart2; // 115200 bauds
	hdma_STlink_tx = &hdma_usart2_tx;

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015da:	e06e      	b.n	80016ba <HAL_UART_MspInit+0x152>
  else if(uartHandle->Instance==USART2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a3b      	ldr	r2, [pc, #236]	; (80016d0 <HAL_UART_MspInit+0x168>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d169      	bne.n	80016ba <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e6:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <HAL_UART_MspInit+0x160>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	4a37      	ldr	r2, [pc, #220]	; (80016c8 <HAL_UART_MspInit+0x160>)
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	6593      	str	r3, [r2, #88]	; 0x58
 80015f2:	4b35      	ldr	r3, [pc, #212]	; (80016c8 <HAL_UART_MspInit+0x160>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <HAL_UART_MspInit+0x160>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <HAL_UART_MspInit+0x160>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <HAL_UART_MspInit+0x160>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001616:	2304      	movs	r3, #4
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001626:	2307      	movs	r3, #7
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001634:	f000 fade 	bl	8001bf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800164a:	2303      	movs	r3, #3
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001658:	f000 facc 	bl	8001bf4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_UART_MspInit+0x16c>)
 800165e:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <HAL_UART_MspInit+0x170>)
 8001660:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <HAL_UART_MspInit+0x16c>)
 8001664:	2202      	movs	r2, #2
 8001666:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HAL_UART_MspInit+0x16c>)
 800166a:	2210      	movs	r2, #16
 800166c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_UART_MspInit+0x16c>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_UART_MspInit+0x16c>)
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_UART_MspInit+0x16c>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <HAL_UART_MspInit+0x16c>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_UART_MspInit+0x16c>)
 8001688:	2220      	movs	r2, #32
 800168a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_UART_MspInit+0x16c>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001692:	4810      	ldr	r0, [pc, #64]	; (80016d4 <HAL_UART_MspInit+0x16c>)
 8001694:	f000 f9f6 	bl	8001a84 <HAL_DMA_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_UART_MspInit+0x13a>
      Error_Handler();
 800169e:	f7ff fad9 	bl	8000c54 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <HAL_UART_MspInit+0x16c>)
 80016a6:	669a      	str	r2, [r3, #104]	; 0x68
 80016a8:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_UART_MspInit+0x16c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6293      	str	r3, [r2, #40]	; 0x28
	huart_STlink = &huart2; // 115200 bauds
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_UART_MspInit+0x174>)
 80016b0:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <HAL_UART_MspInit+0x178>)
 80016b2:	601a      	str	r2, [r3, #0]
	hdma_STlink_tx = &hdma_usart2_tx;
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_UART_MspInit+0x17c>)
 80016b6:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_UART_MspInit+0x16c>)
 80016b8:	601a      	str	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	3730      	adds	r7, #48	; 0x30
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40013800 	.word	0x40013800
 80016c8:	40021000 	.word	0x40021000
 80016cc:	48000400 	.word	0x48000400
 80016d0:	40004400 	.word	0x40004400
 80016d4:	20000628 	.word	0x20000628
 80016d8:	40020080 	.word	0x40020080
 80016dc:	20000624 	.word	0x20000624
 80016e0:	200006f4 	.word	0x200006f4
 80016e4:	200006f0 	.word	0x200006f0

080016e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001720 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016ee:	e003      	b.n	80016f8 <LoopCopyDataInit>

080016f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016f6:	3104      	adds	r1, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016f8:	480b      	ldr	r0, [pc, #44]	; (8001728 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <LoopForever+0xe>)
	adds	r2, r0, r1
 80016fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001700:	d3f6      	bcc.n	80016f0 <CopyDataInit>
	ldr	r2, =_sbss
 8001702:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001704:	e002      	b.n	800170c <LoopFillZerobss>

08001706 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001706:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001708:	f842 3b04 	str.w	r3, [r2], #4

0800170c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <LoopForever+0x16>)
	cmp	r2, r3
 800170e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001710:	d3f9      	bcc.n	8001706 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001712:	f7ff fd4f 	bl	80011b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001716:	f003 fa67 	bl	8004be8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800171a:	f7ff fa0d 	bl	8000b38 <main>

0800171e <LoopForever>:

LoopForever:
    b LoopForever
 800171e:	e7fe      	b.n	800171e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001720:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001724:	08004cb0 	.word	0x08004cb0
	ldr	r0, =_sdata
 8001728:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800172c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001730:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001734:	20000778 	.word	0x20000778

08001738 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC1_IRQHandler>

0800173a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001744:	2003      	movs	r0, #3
 8001746:	f000 f95b 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800174a:	2000      	movs	r0, #0
 800174c:	f000 f80e 	bl	800176c <HAL_InitTick>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	71fb      	strb	r3, [r7, #7]
 800175a:	e001      	b.n	8001760 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800175c:	f7ff fc6e 	bl	800103c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001760:	79fb      	ldrb	r3, [r7, #7]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_InitTick+0x68>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d022      	beq.n	80017c6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_InitTick+0x6c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_InitTick+0x68>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800178c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001790:	fbb2 f3f3 	udiv	r3, r2, r3
 8001794:	4618      	mov	r0, r3
 8001796:	f000 f968 	bl	8001a6a <HAL_SYSTICK_Config>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10f      	bne.n	80017c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	d809      	bhi.n	80017ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a6:	2200      	movs	r2, #0
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017ae:	f000 f932 	bl	8001a16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_InitTick+0x70>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e007      	b.n	80017ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e004      	b.n	80017ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e001      	b.n	80017ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_IncTick+0x1c>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_IncTick+0x20>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a03      	ldr	r2, [pc, #12]	; (80017fc <HAL_IncTick+0x1c>)
 80017f0:	6013      	str	r3, [r2, #0]
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	20000774 	.word	0x20000774
 8001800:	20000008 	.word	0x20000008

08001804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000774 	.word	0x20000774

0800181c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff ffee 	bl	8001804 <HAL_GetTick>
 8001828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001834:	d004      	beq.n	8001840 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_Delay+0x40>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001840:	bf00      	nop
 8001842:	f7ff ffdf 	bl	8001804 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	429a      	cmp	r2, r3
 8001850:	d8f7      	bhi.n	8001842 <HAL_Delay+0x26>
  {
  }
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e0:	f7ff ff8e 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff29 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a28:	f7ff ff3e 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff ff8e 	bl	8001954 <NVIC_EncodePriority>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff5d 	bl	8001900 <__NVIC_SetPriority>
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff31 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffa2 	bl	80019bc <SysTick_Config>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e098      	b.n	8001bc8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b4d      	ldr	r3, [pc, #308]	; (8001bd4 <HAL_DMA_Init+0x150>)
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d80f      	bhi.n	8001ac2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <HAL_DMA_Init+0x154>)
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a4b      	ldr	r2, [pc, #300]	; (8001bdc <HAL_DMA_Init+0x158>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	009a      	lsls	r2, r3, #2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a48      	ldr	r2, [pc, #288]	; (8001be0 <HAL_DMA_Init+0x15c>)
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac0:	e00e      	b.n	8001ae0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b46      	ldr	r3, [pc, #280]	; (8001be4 <HAL_DMA_Init+0x160>)
 8001aca:	4413      	add	r3, r2
 8001acc:	4a43      	ldr	r2, [pc, #268]	; (8001bdc <HAL_DMA_Init+0x158>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	009a      	lsls	r2, r3, #2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a42      	ldr	r2, [pc, #264]	; (8001be8 <HAL_DMA_Init+0x164>)
 8001ade:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001afa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b3a:	d039      	beq.n	8001bb0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	4a27      	ldr	r2, [pc, #156]	; (8001be0 <HAL_DMA_Init+0x15c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d11a      	bne.n	8001b7c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b46:	4b29      	ldr	r3, [pc, #164]	; (8001bec <HAL_DMA_Init+0x168>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f003 031c 	and.w	r3, r3, #28
 8001b52:	210f      	movs	r1, #15
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	4924      	ldr	r1, [pc, #144]	; (8001bec <HAL_DMA_Init+0x168>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <HAL_DMA_Init+0x168>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6c:	f003 031c 	and.w	r3, r3, #28
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	491d      	ldr	r1, [pc, #116]	; (8001bec <HAL_DMA_Init+0x168>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]
 8001b7a:	e019      	b.n	8001bb0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <HAL_DMA_Init+0x16c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b84:	f003 031c 	and.w	r3, r3, #28
 8001b88:	210f      	movs	r1, #15
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	4917      	ldr	r1, [pc, #92]	; (8001bf0 <HAL_DMA_Init+0x16c>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_DMA_Init+0x16c>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6859      	ldr	r1, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f003 031c 	and.w	r3, r3, #28
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	4911      	ldr	r1, [pc, #68]	; (8001bf0 <HAL_DMA_Init+0x16c>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40020407 	.word	0x40020407
 8001bd8:	bffdfff8 	.word	0xbffdfff8
 8001bdc:	cccccccd 	.word	0xcccccccd
 8001be0:	40020000 	.word	0x40020000
 8001be4:	bffdfbf8 	.word	0xbffdfbf8
 8001be8:	40020400 	.word	0x40020400
 8001bec:	400200a8 	.word	0x400200a8
 8001bf0:	400204a8 	.word	0x400204a8

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c02:	e148      	b.n	8001e96 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 813a 	beq.w	8001e90 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d00b      	beq.n	8001c3c <HAL_GPIO_Init+0x48>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d007      	beq.n	8001c3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c30:	2b11      	cmp	r3, #17
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b12      	cmp	r3, #18
 8001c3a:	d130      	bne.n	8001c9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c72:	2201      	movs	r2, #1
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 0201 	and.w	r2, r3, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0xea>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b12      	cmp	r3, #18
 8001cdc:	d123      	bne.n	8001d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	08da      	lsrs	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3208      	adds	r2, #8
 8001ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	6939      	ldr	r1, [r7, #16]
 8001d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0203 	and.w	r2, r3, #3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8094 	beq.w	8001e90 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d68:	4b52      	ldr	r3, [pc, #328]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6c:	4a51      	ldr	r2, [pc, #324]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6613      	str	r3, [r2, #96]	; 0x60
 8001d74:	4b4f      	ldr	r3, [pc, #316]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d80:	4a4d      	ldr	r2, [pc, #308]	; (8001eb8 <HAL_GPIO_Init+0x2c4>)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	220f      	movs	r2, #15
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001daa:	d00d      	beq.n	8001dc8 <HAL_GPIO_Init+0x1d4>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a43      	ldr	r2, [pc, #268]	; (8001ebc <HAL_GPIO_Init+0x2c8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d007      	beq.n	8001dc4 <HAL_GPIO_Init+0x1d0>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a42      	ldr	r2, [pc, #264]	; (8001ec0 <HAL_GPIO_Init+0x2cc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d101      	bne.n	8001dc0 <HAL_GPIO_Init+0x1cc>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e004      	b.n	8001dca <HAL_GPIO_Init+0x1d6>
 8001dc0:	2307      	movs	r3, #7
 8001dc2:	e002      	b.n	8001dca <HAL_GPIO_Init+0x1d6>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_GPIO_Init+0x1d6>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	f002 0203 	and.w	r2, r2, #3
 8001dd0:	0092      	lsls	r2, r2, #2
 8001dd2:	4093      	lsls	r3, r2
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dda:	4937      	ldr	r1, [pc, #220]	; (8001eb8 <HAL_GPIO_Init+0x2c4>)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001de8:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <HAL_GPIO_Init+0x2d0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e0c:	4a2d      	ldr	r2, [pc, #180]	; (8001ec4 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e12:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_GPIO_Init+0x2d0>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e36:	4a23      	ldr	r2, [pc, #140]	; (8001ec4 <HAL_GPIO_Init+0x2d0>)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e60:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <HAL_GPIO_Init+0x2d0>)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_GPIO_Init+0x2d0>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <HAL_GPIO_Init+0x2d0>)
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3301      	adds	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f47f aeaf 	bne.w	8001c04 <HAL_GPIO_Init+0x10>
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	48000400 	.word	0x48000400
 8001ec0:	48000800 	.word	0x48000800
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	887b      	ldrh	r3, [r7, #2]
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e001      	b.n	8001eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
 8001f04:	4613      	mov	r3, r2
 8001f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f08:	787b      	ldrb	r3, [r7, #1]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f14:	e002      	b.n	8001f1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e081      	b.n	800203e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fd58 	bl	8000a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2224      	movs	r2, #36	; 0x24
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d107      	bne.n	8001fa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	e006      	b.n	8001fb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d104      	bne.n	8001fc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	ea42 0103 	orr.w	r1, r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	021a      	lsls	r2, r3, #8
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69d9      	ldr	r1, [r3, #28]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	461a      	mov	r2, r3
 8002054:	460b      	mov	r3, r1
 8002056:	817b      	strh	r3, [r7, #10]
 8002058:	4613      	mov	r3, r2
 800205a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b20      	cmp	r3, #32
 8002066:	f040 80da 	bne.w	800221e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_I2C_Master_Transmit+0x30>
 8002074:	2302      	movs	r3, #2
 8002076:	e0d3      	b.n	8002220 <HAL_I2C_Master_Transmit+0x1d8>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002080:	f7ff fbc0 	bl	8001804 <HAL_GetTick>
 8002084:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2319      	movs	r3, #25
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f8f0 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e0be      	b.n	8002220 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2221      	movs	r2, #33	; 0x21
 80020a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2210      	movs	r2, #16
 80020ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	893a      	ldrh	r2, [r7, #8]
 80020c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2bff      	cmp	r3, #255	; 0xff
 80020d2:	d90e      	bls.n	80020f2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	22ff      	movs	r2, #255	; 0xff
 80020d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	8979      	ldrh	r1, [r7, #10]
 80020e2:	4b51      	ldr	r3, [pc, #324]	; (8002228 <HAL_I2C_Master_Transmit+0x1e0>)
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f9e6 	bl	80024bc <I2C_TransferConfig>
 80020f0:	e06c      	b.n	80021cc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	b2da      	uxtb	r2, r3
 8002102:	8979      	ldrh	r1, [r7, #10]
 8002104:	4b48      	ldr	r3, [pc, #288]	; (8002228 <HAL_I2C_Master_Transmit+0x1e0>)
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f9d5 	bl	80024bc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002112:	e05b      	b.n	80021cc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	6a39      	ldr	r1, [r7, #32]
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f8ed 	bl	80022f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e07b      	b.n	8002220 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d034      	beq.n	80021cc <HAL_I2C_Master_Transmit+0x184>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	2b00      	cmp	r3, #0
 8002168:	d130      	bne.n	80021cc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	2200      	movs	r2, #0
 8002172:	2180      	movs	r1, #128	; 0x80
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f87f 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e04d      	b.n	8002220 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	2bff      	cmp	r3, #255	; 0xff
 800218c:	d90e      	bls.n	80021ac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	22ff      	movs	r2, #255	; 0xff
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002198:	b2da      	uxtb	r2, r3
 800219a:	8979      	ldrh	r1, [r7, #10]
 800219c:	2300      	movs	r3, #0
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f989 	bl	80024bc <I2C_TransferConfig>
 80021aa:	e00f      	b.n	80021cc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	8979      	ldrh	r1, [r7, #10]
 80021be:	2300      	movs	r3, #0
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f978 	bl	80024bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d19e      	bne.n	8002114 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	6a39      	ldr	r1, [r7, #32]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f8cc 	bl	8002378 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e01a      	b.n	8002220 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2220      	movs	r2, #32
 80021f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_I2C_Master_Transmit+0x1e4>)
 80021fe:	400b      	ands	r3, r1
 8002200:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800221e:	2302      	movs	r3, #2
  }
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	80002000 	.word	0x80002000
 800222c:	fe00e800 	.word	0xfe00e800

08002230 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d103      	bne.n	800224e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2200      	movs	r2, #0
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b01      	cmp	r3, #1
 800225a:	d007      	beq.n	800226c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	619a      	str	r2, [r3, #24]
  }
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002288:	e022      	b.n	80022d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002290:	d01e      	beq.n	80022d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002292:	f7ff fab7 	bl	8001804 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d302      	bcc.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d113      	bne.n	80022d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f043 0220 	orr.w	r2, r3, #32
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e00f      	b.n	80022f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	4013      	ands	r3, r2
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	429a      	cmp	r2, r3
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d0cd      	beq.n	800228a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002304:	e02c      	b.n	8002360 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f870 	bl	80023f0 <I2C_IsAcknowledgeFailed>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e02a      	b.n	8002370 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002320:	d01e      	beq.n	8002360 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002322:	f7ff fa6f 	bl	8001804 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	429a      	cmp	r2, r3
 8002330:	d302      	bcc.n	8002338 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d113      	bne.n	8002360 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	f043 0220 	orr.w	r2, r3, #32
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e007      	b.n	8002370 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b02      	cmp	r3, #2
 800236c:	d1cb      	bne.n	8002306 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002384:	e028      	b.n	80023d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f830 	bl	80023f0 <I2C_IsAcknowledgeFailed>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e026      	b.n	80023e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239a:	f7ff fa33 	bl	8001804 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d302      	bcc.n	80023b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d113      	bne.n	80023d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	f043 0220 	orr.w	r2, r3, #32
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e007      	b.n	80023e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d1cf      	bne.n	8002386 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b10      	cmp	r3, #16
 8002408:	d151      	bne.n	80024ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800240a:	e022      	b.n	8002452 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002412:	d01e      	beq.n	8002452 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002414:	f7ff f9f6 	bl	8001804 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	429a      	cmp	r2, r3
 8002422:	d302      	bcc.n	800242a <I2C_IsAcknowledgeFailed+0x3a>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d113      	bne.n	8002452 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f043 0220 	orr.w	r2, r3, #32
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e02e      	b.n	80024b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b20      	cmp	r3, #32
 800245e:	d1d5      	bne.n	800240c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2210      	movs	r2, #16
 8002466:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2220      	movs	r2, #32
 800246e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f7ff fedd 	bl	8002230 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8002482:	400b      	ands	r3, r1
 8002484:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f043 0204 	orr.w	r2, r3, #4
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	fe00e800 	.word	0xfe00e800

080024bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	817b      	strh	r3, [r7, #10]
 80024ca:	4613      	mov	r3, r2
 80024cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	0d5b      	lsrs	r3, r3, #21
 80024d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <I2C_TransferConfig+0x58>)
 80024de:	430b      	orrs	r3, r1
 80024e0:	43db      	mvns	r3, r3
 80024e2:	ea02 0103 	and.w	r1, r2, r3
 80024e6:	897b      	ldrh	r3, [r7, #10]
 80024e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024ec:	7a7b      	ldrb	r3, [r7, #9]
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	03ff63ff 	.word	0x03ff63ff

08002518 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b20      	cmp	r3, #32
 800252c:	d138      	bne.n	80025a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002538:	2302      	movs	r3, #2
 800253a:	e032      	b.n	80025a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2224      	movs	r2, #36	; 0x24
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800256a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6819      	ldr	r1, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025a0:	2302      	movs	r3, #2
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	d139      	bne.n	8002638 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e033      	b.n	800263a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2224      	movs	r2, #36	; 0x24
 80025de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002600:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	e000      	b.n	800263a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002638:	2302      	movs	r3, #2
  }
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002654:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6613      	str	r3, [r2, #96]	; 0x60
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800265e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	4905      	ldr	r1, [pc, #20]	; (8002684 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40021000 	.word	0x40021000
 8002684:	40010000 	.word	0x40010000

08002688 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40007000 	.word	0x40007000

080026a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b2:	d130      	bne.n	8002716 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b4:	4b23      	ldr	r3, [pc, #140]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c0:	d038      	beq.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026ca:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2232      	movs	r2, #50	; 0x32
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	4a1b      	ldr	r2, [pc, #108]	; (800274c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0c9b      	lsrs	r3, r3, #18
 80026e4:	3301      	adds	r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026e8:	e002      	b.n	80026f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fc:	d102      	bne.n	8002704 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f2      	bne.n	80026ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002710:	d110      	bne.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e00f      	b.n	8002736 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002722:	d007      	beq.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800272c:	4a05      	ldr	r2, [pc, #20]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002732:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40007000 	.word	0x40007000
 8002748:	20000000 	.word	0x20000000
 800274c:	431bde83 	.word	0x431bde83

08002750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d102      	bne.n	8002764 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	f000 bc11 	b.w	8002f86 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002764:	4ba0      	ldr	r3, [pc, #640]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800276e:	4b9e      	ldr	r3, [pc, #632]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80e4 	beq.w	800294e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <HAL_RCC_OscConfig+0x4c>
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b0c      	cmp	r3, #12
 8002790:	f040 808b 	bne.w	80028aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2b01      	cmp	r3, #1
 8002798:	f040 8087 	bne.w	80028aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800279c:	4b92      	ldr	r3, [pc, #584]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_OscConfig+0x64>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e3e8      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1a      	ldr	r2, [r3, #32]
 80027b8:	4b8b      	ldr	r3, [pc, #556]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d004      	beq.n	80027ce <HAL_RCC_OscConfig+0x7e>
 80027c4:	4b88      	ldr	r3, [pc, #544]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027cc:	e005      	b.n	80027da <HAL_RCC_OscConfig+0x8a>
 80027ce:	4b86      	ldr	r3, [pc, #536]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80027d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027da:	4293      	cmp	r3, r2
 80027dc:	d223      	bcs.n	8002826 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fd78 	bl	80032d8 <RCC_SetFlashLatencyFromMSIRange>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e3c9      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f2:	4b7d      	ldr	r3, [pc, #500]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a7c      	ldr	r2, [pc, #496]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80027f8:	f043 0308 	orr.w	r3, r3, #8
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b7a      	ldr	r3, [pc, #488]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4977      	ldr	r1, [pc, #476]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002810:	4b75      	ldr	r3, [pc, #468]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	4972      	ldr	r1, [pc, #456]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
 8002824:	e025      	b.n	8002872 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002826:	4b70      	ldr	r3, [pc, #448]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a6f      	ldr	r2, [pc, #444]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 800282c:	f043 0308 	orr.w	r3, r3, #8
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b6d      	ldr	r3, [pc, #436]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	496a      	ldr	r1, [pc, #424]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002844:	4b68      	ldr	r3, [pc, #416]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	4965      	ldr	r1, [pc, #404]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fd38 	bl	80032d8 <RCC_SetFlashLatencyFromMSIRange>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e389      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002872:	f000 fc6f 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8002876:	4601      	mov	r1, r0
 8002878:	4b5b      	ldr	r3, [pc, #364]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	4a5a      	ldr	r2, [pc, #360]	; (80029ec <HAL_RCC_OscConfig+0x29c>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	fa21 f303 	lsr.w	r3, r1, r3
 800288e:	4a58      	ldr	r2, [pc, #352]	; (80029f0 <HAL_RCC_OscConfig+0x2a0>)
 8002890:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002892:	4b58      	ldr	r3, [pc, #352]	; (80029f4 <HAL_RCC_OscConfig+0x2a4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe ff68 	bl	800176c <HAL_InitTick>
 800289c:	4603      	mov	r3, r0
 800289e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d052      	beq.n	800294c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	e36d      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d032      	beq.n	8002918 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028b2:	4b4d      	ldr	r3, [pc, #308]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a4c      	ldr	r2, [pc, #304]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028be:	f7fe ffa1 	bl	8001804 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028c6:	f7fe ff9d 	bl	8001804 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e356      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028d8:	4b43      	ldr	r3, [pc, #268]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028e4:	4b40      	ldr	r3, [pc, #256]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a3f      	ldr	r2, [pc, #252]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80028ea:	f043 0308 	orr.w	r3, r3, #8
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	493a      	ldr	r1, [pc, #232]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002902:	4b39      	ldr	r3, [pc, #228]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	4935      	ldr	r1, [pc, #212]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
 8002916:	e01a      	b.n	800294e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002918:	4b33      	ldr	r3, [pc, #204]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a32      	ldr	r2, [pc, #200]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002924:	f7fe ff6e 	bl	8001804 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800292c:	f7fe ff6a 	bl	8001804 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e323      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x1dc>
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800294c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d073      	beq.n	8002a42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b08      	cmp	r3, #8
 800295e:	d005      	beq.n	800296c <HAL_RCC_OscConfig+0x21c>
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d10e      	bne.n	8002984 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d10b      	bne.n	8002984 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d063      	beq.n	8002a40 <HAL_RCC_OscConfig+0x2f0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d15f      	bne.n	8002a40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e300      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298c:	d106      	bne.n	800299c <HAL_RCC_OscConfig+0x24c>
 800298e:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e01d      	b.n	80029d8 <HAL_RCC_OscConfig+0x288>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x270>
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a0f      	ldr	r2, [pc, #60]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80029ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e00b      	b.n	80029d8 <HAL_RCC_OscConfig+0x288>
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a08      	ldr	r2, [pc, #32]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80029c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <HAL_RCC_OscConfig+0x298>)
 80029d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01b      	beq.n	8002a18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7fe ff10 	bl	8001804 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029e6:	e010      	b.n	8002a0a <HAL_RCC_OscConfig+0x2ba>
 80029e8:	40021000 	.word	0x40021000
 80029ec:	08004c58 	.word	0x08004c58
 80029f0:	20000000 	.word	0x20000000
 80029f4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f8:	f7fe ff04 	bl	8001804 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e2bd      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a0a:	4baf      	ldr	r3, [pc, #700]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x2a8>
 8002a16:	e014      	b.n	8002a42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe fef4 	bl	8001804 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7fe fef0 	bl	8001804 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e2a9      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a32:	4ba5      	ldr	r3, [pc, #660]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x2d0>
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d060      	beq.n	8002b10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_OscConfig+0x310>
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2b0c      	cmp	r3, #12
 8002a58:	d119      	bne.n	8002a8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d116      	bne.n	8002a8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a60:	4b99      	ldr	r3, [pc, #612]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_OscConfig+0x328>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e286      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a78:	4b93      	ldr	r3, [pc, #588]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	4990      	ldr	r1, [pc, #576]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a8c:	e040      	b.n	8002b10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d023      	beq.n	8002ade <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a96:	4b8c      	ldr	r3, [pc, #560]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a8b      	ldr	r2, [pc, #556]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7fe feaf 	bl	8001804 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aaa:	f7fe feab 	bl	8001804 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e264      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002abc:	4b82      	ldr	r3, [pc, #520]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac8:	4b7f      	ldr	r3, [pc, #508]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	497c      	ldr	r1, [pc, #496]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
 8002adc:	e018      	b.n	8002b10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ade:	4b7a      	ldr	r3, [pc, #488]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a79      	ldr	r2, [pc, #484]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe fe8b 	bl	8001804 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af2:	f7fe fe87 	bl	8001804 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e240      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b04:	4b70      	ldr	r3, [pc, #448]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d03c      	beq.n	8002b96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01c      	beq.n	8002b5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b24:	4b68      	ldr	r3, [pc, #416]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2a:	4a67      	ldr	r2, [pc, #412]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe fe66 	bl	8001804 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7fe fe62 	bl	8001804 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e21b      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b4e:	4b5e      	ldr	r3, [pc, #376]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ef      	beq.n	8002b3c <HAL_RCC_OscConfig+0x3ec>
 8002b5c:	e01b      	b.n	8002b96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5e:	4b5a      	ldr	r3, [pc, #360]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b64:	4a58      	ldr	r2, [pc, #352]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fe49 	bl	8001804 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b76:	f7fe fe45 	bl	8001804 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e1fe      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b88:	4b4f      	ldr	r3, [pc, #316]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1ef      	bne.n	8002b76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80a6 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ba8:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10d      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb4:	4b44      	ldr	r3, [pc, #272]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	4a43      	ldr	r2, [pc, #268]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8002bc0:	4b41      	ldr	r3, [pc, #260]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd0:	4b3e      	ldr	r3, [pc, #248]	; (8002ccc <HAL_RCC_OscConfig+0x57c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d118      	bne.n	8002c0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bdc:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <HAL_RCC_OscConfig+0x57c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a3a      	ldr	r2, [pc, #232]	; (8002ccc <HAL_RCC_OscConfig+0x57c>)
 8002be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be8:	f7fe fe0c 	bl	8001804 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf0:	f7fe fe08 	bl	8001804 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1c1      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c02:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <HAL_RCC_OscConfig+0x57c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d108      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4d8>
 8002c16:	4b2c      	ldr	r3, [pc, #176]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1c:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c26:	e024      	b.n	8002c72 <HAL_RCC_OscConfig+0x522>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b05      	cmp	r3, #5
 8002c2e:	d110      	bne.n	8002c52 <HAL_RCC_OscConfig+0x502>
 8002c30:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c36:	4a24      	ldr	r2, [pc, #144]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c40:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	4a20      	ldr	r2, [pc, #128]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c50:	e00f      	b.n	8002c72 <HAL_RCC_OscConfig+0x522>
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c58:	4a1b      	ldr	r2, [pc, #108]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c62:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c68:	4a17      	ldr	r2, [pc, #92]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002c6a:	f023 0304 	bic.w	r3, r3, #4
 8002c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d016      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fe fdc3 	bl	8001804 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe fdbf 	bl	8001804 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e176      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_OscConfig+0x578>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0ed      	beq.n	8002c82 <HAL_RCC_OscConfig+0x532>
 8002ca6:	e01a      	b.n	8002cde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe fdac 	bl	8001804 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cae:	e00f      	b.n	8002cd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb0:	f7fe fda8 	bl	8001804 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d906      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e15f      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd0:	4baa      	ldr	r3, [pc, #680]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1e8      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cde:	7ffb      	ldrb	r3, [r7, #31]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce4:	4ba5      	ldr	r3, [pc, #660]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce8:	4aa4      	ldr	r2, [pc, #656]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d03c      	beq.n	8002d76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01c      	beq.n	8002d3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d04:	4b9d      	ldr	r3, [pc, #628]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d0a:	4a9c      	ldr	r2, [pc, #624]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d14:	f7fe fd76 	bl	8001804 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d1c:	f7fe fd72 	bl	8001804 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e12b      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d2e:	4b93      	ldr	r3, [pc, #588]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ef      	beq.n	8002d1c <HAL_RCC_OscConfig+0x5cc>
 8002d3c:	e01b      	b.n	8002d76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d3e:	4b8f      	ldr	r3, [pc, #572]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d44:	4a8d      	ldr	r2, [pc, #564]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fd59 	bl	8001804 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d56:	f7fe fd55 	bl	8001804 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e10e      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d68:	4b84      	ldr	r3, [pc, #528]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1ef      	bne.n	8002d56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8102 	beq.w	8002f84 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	f040 80c5 	bne.w	8002f14 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d8a:	4b7c      	ldr	r3, [pc, #496]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f003 0203 	and.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d12c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	3b01      	subs	r3, #1
 8002daa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d123      	bne.n	8002df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d11b      	bne.n	8002df8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d113      	bne.n	8002df8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	085b      	lsrs	r3, r3, #1
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d109      	bne.n	8002df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	085b      	lsrs	r3, r3, #1
 8002df0:	3b01      	subs	r3, #1
 8002df2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d067      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d062      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dfe:	4b5f      	ldr	r3, [pc, #380]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0bb      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e0e:	4b5b      	ldr	r3, [pc, #364]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5a      	ldr	r2, [pc, #360]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002e14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e1a:	f7fe fcf3 	bl	8001804 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e22:	f7fe fcef 	bl	8001804 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e0a8      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e34:	4b51      	ldr	r3, [pc, #324]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f0      	bne.n	8002e22 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e40:	4b4e      	ldr	r3, [pc, #312]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	4b4e      	ldr	r3, [pc, #312]	; (8002f80 <HAL_RCC_OscConfig+0x830>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e50:	3a01      	subs	r2, #1
 8002e52:	0112      	lsls	r2, r2, #4
 8002e54:	4311      	orrs	r1, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e5a:	0212      	lsls	r2, r2, #8
 8002e5c:	4311      	orrs	r1, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e62:	0852      	lsrs	r2, r2, #1
 8002e64:	3a01      	subs	r2, #1
 8002e66:	0552      	lsls	r2, r2, #21
 8002e68:	4311      	orrs	r1, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e6e:	0852      	lsrs	r2, r2, #1
 8002e70:	3a01      	subs	r2, #1
 8002e72:	0652      	lsls	r2, r2, #25
 8002e74:	4311      	orrs	r1, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e7a:	06d2      	lsls	r2, r2, #27
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	493f      	ldr	r1, [pc, #252]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e84:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a3c      	ldr	r2, [pc, #240]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e90:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a39      	ldr	r2, [pc, #228]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e9c:	f7fe fcb2 	bl	8001804 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7fe fcae 	bl	8001804 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e067      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb6:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ec2:	e05f      	b.n	8002f84 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e05e      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d157      	bne.n	8002f84 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ed4:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a28      	ldr	r2, [pc, #160]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ede:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ee0:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a25      	ldr	r2, [pc, #148]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eec:	f7fe fc8a 	bl	8001804 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe fc86 	bl	8001804 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e03f      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f06:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x7a4>
 8002f12:	e037      	b.n	8002f84 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b0c      	cmp	r3, #12
 8002f18:	d02d      	beq.n	8002f76 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1a:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002f20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f24:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d105      	bne.n	8002f3e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002f38:	f023 0303 	bic.w	r3, r3, #3
 8002f3c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	4a0e      	ldr	r2, [pc, #56]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002f44:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fc59 	bl	8001804 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f56:	f7fe fc55 	bl	8001804 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e00e      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <HAL_RCC_OscConfig+0x82c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCC_OscConfig+0x806>
 8002f74:	e006      	b.n	8002f84 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e005      	b.n	8002f86 <HAL_RCC_OscConfig+0x836>
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop

08002f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0c8      	b.n	8003136 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b66      	ldr	r3, [pc, #408]	; (8003140 <HAL_RCC_ClockConfig+0x1b0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d910      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b63      	ldr	r3, [pc, #396]	; (8003140 <HAL_RCC_ClockConfig+0x1b0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 0207 	bic.w	r2, r3, #7
 8002fba:	4961      	ldr	r1, [pc, #388]	; (8003140 <HAL_RCC_ClockConfig+0x1b0>)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b5f      	ldr	r3, [pc, #380]	; (8003140 <HAL_RCC_ClockConfig+0x1b0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0b0      	b.n	8003136 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d04c      	beq.n	800307a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe8:	4b56      	ldr	r3, [pc, #344]	; (8003144 <HAL_RCC_ClockConfig+0x1b4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d121      	bne.n	8003038 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e09e      	b.n	8003136 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003000:	4b50      	ldr	r3, [pc, #320]	; (8003144 <HAL_RCC_ClockConfig+0x1b4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d115      	bne.n	8003038 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e092      	b.n	8003136 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d107      	bne.n	8003028 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003018:	4b4a      	ldr	r3, [pc, #296]	; (8003144 <HAL_RCC_ClockConfig+0x1b4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d109      	bne.n	8003038 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e086      	b.n	8003136 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003028:	4b46      	ldr	r3, [pc, #280]	; (8003144 <HAL_RCC_ClockConfig+0x1b4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e07e      	b.n	8003136 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003038:	4b42      	ldr	r3, [pc, #264]	; (8003144 <HAL_RCC_ClockConfig+0x1b4>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f023 0203 	bic.w	r2, r3, #3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	493f      	ldr	r1, [pc, #252]	; (8003144 <HAL_RCC_ClockConfig+0x1b4>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304a:	f7fe fbdb 	bl	8001804 <HAL_GetTick>
 800304e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003050:	e00a      	b.n	8003068 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003052:	f7fe fbd7 	bl	8001804 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e066      	b.n	8003136 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003068:	4b36      	ldr	r3, [pc, #216]	; (8003144 <HAL_RCC_ClockConfig+0x1b4>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 020c 	and.w	r2, r3, #12
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	429a      	cmp	r2, r3
 8003078:	d1eb      	bne.n	8003052 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003086:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <HAL_RCC_ClockConfig+0x1b4>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	492c      	ldr	r1, [pc, #176]	; (8003144 <HAL_RCC_ClockConfig+0x1b4>)
 8003094:	4313      	orrs	r3, r2
 8003096:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003098:	4b29      	ldr	r3, [pc, #164]	; (8003140 <HAL_RCC_ClockConfig+0x1b0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d210      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b26      	ldr	r3, [pc, #152]	; (8003140 <HAL_RCC_ClockConfig+0x1b0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 0207 	bic.w	r2, r3, #7
 80030ae:	4924      	ldr	r1, [pc, #144]	; (8003140 <HAL_RCC_ClockConfig+0x1b0>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b22      	ldr	r3, [pc, #136]	; (8003140 <HAL_RCC_ClockConfig+0x1b0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e036      	b.n	8003136 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <HAL_RCC_ClockConfig+0x1b4>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4918      	ldr	r1, [pc, #96]	; (8003144 <HAL_RCC_ClockConfig+0x1b4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030f2:	4b14      	ldr	r3, [pc, #80]	; (8003144 <HAL_RCC_ClockConfig+0x1b4>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4910      	ldr	r1, [pc, #64]	; (8003144 <HAL_RCC_ClockConfig+0x1b4>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003106:	f000 f825 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 800310a:	4601      	mov	r1, r0
 800310c:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <HAL_RCC_ClockConfig+0x1b4>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	4a0c      	ldr	r2, [pc, #48]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	5cd3      	ldrb	r3, [r2, r3]
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	fa21 f303 	lsr.w	r3, r1, r3
 8003122:	4a0a      	ldr	r2, [pc, #40]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe fb1e 	bl	800176c <HAL_InitTick>
 8003130:	4603      	mov	r3, r0
 8003132:	72fb      	strb	r3, [r7, #11]

  return status;
 8003134:	7afb      	ldrb	r3, [r7, #11]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40022000 	.word	0x40022000
 8003144:	40021000 	.word	0x40021000
 8003148:	08004c58 	.word	0x08004c58
 800314c:	20000000 	.word	0x20000000
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003154:	b480      	push	{r7}
 8003156:	b089      	sub	sp, #36	; 0x24
 8003158:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	2300      	movs	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003162:	4b3d      	ldr	r3, [pc, #244]	; (8003258 <HAL_RCC_GetSysClockFreq+0x104>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800316c:	4b3a      	ldr	r3, [pc, #232]	; (8003258 <HAL_RCC_GetSysClockFreq+0x104>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x34>
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	2b0c      	cmp	r3, #12
 8003180:	d121      	bne.n	80031c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d11e      	bne.n	80031c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003188:	4b33      	ldr	r3, [pc, #204]	; (8003258 <HAL_RCC_GetSysClockFreq+0x104>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003194:	4b30      	ldr	r3, [pc, #192]	; (8003258 <HAL_RCC_GetSysClockFreq+0x104>)
 8003196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	e005      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031a4:	4b2c      	ldr	r3, [pc, #176]	; (8003258 <HAL_RCC_GetSysClockFreq+0x104>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031b0:	4a2a      	ldr	r2, [pc, #168]	; (800325c <HAL_RCC_GetSysClockFreq+0x108>)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10d      	bne.n	80031dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031c4:	e00a      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d102      	bne.n	80031d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031cc:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031ce:	61bb      	str	r3, [r7, #24]
 80031d0:	e004      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031d8:	4b22      	ldr	r3, [pc, #136]	; (8003264 <HAL_RCC_GetSysClockFreq+0x110>)
 80031da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b0c      	cmp	r3, #12
 80031e0:	d133      	bne.n	800324a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_RCC_GetSysClockFreq+0x104>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d002      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0xa4>
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d003      	beq.n	80031fe <HAL_RCC_GetSysClockFreq+0xaa>
 80031f6:	e005      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031fa:	617b      	str	r3, [r7, #20]
      break;
 80031fc:	e005      	b.n	800320a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031fe:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_RCC_GetSysClockFreq+0x110>)
 8003200:	617b      	str	r3, [r7, #20]
      break;
 8003202:	e002      	b.n	800320a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	617b      	str	r3, [r7, #20]
      break;
 8003208:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <HAL_RCC_GetSysClockFreq+0x104>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	3301      	adds	r3, #1
 8003216:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003218:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <HAL_RCC_GetSysClockFreq+0x104>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	0a1b      	lsrs	r3, r3, #8
 800321e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	fb02 f203 	mul.w	r2, r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_RCC_GetSysClockFreq+0x104>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0e5b      	lsrs	r3, r3, #25
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	3301      	adds	r3, #1
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800324a:	69bb      	ldr	r3, [r7, #24]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3724      	adds	r7, #36	; 0x24
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40021000 	.word	0x40021000
 800325c:	08004c70 	.word	0x08004c70
 8003260:	00f42400 	.word	0x00f42400
 8003264:	007a1200 	.word	0x007a1200

08003268 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <HAL_RCC_GetHCLKFreq+0x14>)
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000000 	.word	0x20000000

08003280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003284:	f7ff fff0 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 8003288:	4601      	mov	r1, r0
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003296:	5cd3      	ldrb	r3, [r2, r3]
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40021000 	.word	0x40021000
 80032a8:	08004c68 	.word	0x08004c68

080032ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032b0:	f7ff ffda 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 80032b4:	4601      	mov	r1, r0
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0adb      	lsrs	r3, r3, #11
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032c2:	5cd3      	ldrb	r3, [r2, r3]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	08004c68 	.word	0x08004c68

080032d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032e0:	2300      	movs	r3, #0
 80032e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032e4:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032f0:	f7ff f9ca 	bl	8002688 <HAL_PWREx_GetVoltageRange>
 80032f4:	6178      	str	r0, [r7, #20]
 80032f6:	e014      	b.n	8003322 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fc:	4a24      	ldr	r2, [pc, #144]	; (8003390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003302:	6593      	str	r3, [r2, #88]	; 0x58
 8003304:	4b22      	ldr	r3, [pc, #136]	; (8003390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003310:	f7ff f9ba 	bl	8002688 <HAL_PWREx_GetVoltageRange>
 8003314:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	4a1d      	ldr	r2, [pc, #116]	; (8003390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800331c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003320:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003328:	d10b      	bne.n	8003342 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b80      	cmp	r3, #128	; 0x80
 800332e:	d919      	bls.n	8003364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2ba0      	cmp	r3, #160	; 0xa0
 8003334:	d902      	bls.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003336:	2302      	movs	r3, #2
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	e013      	b.n	8003364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800333c:	2301      	movs	r3, #1
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	e010      	b.n	8003364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b80      	cmp	r3, #128	; 0x80
 8003346:	d902      	bls.n	800334e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003348:	2303      	movs	r3, #3
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	e00a      	b.n	8003364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b80      	cmp	r3, #128	; 0x80
 8003352:	d102      	bne.n	800335a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003354:	2302      	movs	r3, #2
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	e004      	b.n	8003364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b70      	cmp	r3, #112	; 0x70
 800335e:	d101      	bne.n	8003364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003360:	2301      	movs	r3, #1
 8003362:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 0207 	bic.w	r2, r3, #7
 800336c:	4909      	ldr	r1, [pc, #36]	; (8003394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	429a      	cmp	r2, r3
 8003380:	d001      	beq.n	8003386 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40021000 	.word	0x40021000
 8003394:	40022000 	.word	0x40022000

08003398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033a0:	2300      	movs	r3, #0
 80033a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033a4:	2300      	movs	r3, #0
 80033a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d02f      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033bc:	d005      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80033be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033c2:	d015      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80033c8:	e00f      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80033ca:	4bac      	ldr	r3, [pc, #688]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	4aab      	ldr	r2, [pc, #684]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033d6:	e00c      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f9cc 	bl	800377c <RCCEx_PLLSAI1_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033e8:	e003      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	74fb      	strb	r3, [r7, #19]
      break;
 80033ee:	e000      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80033f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f2:	7cfb      	ldrb	r3, [r7, #19]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10b      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f8:	4ba0      	ldr	r3, [pc, #640]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	499d      	ldr	r1, [pc, #628]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800340e:	e001      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8099 	beq.w	8003554 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003426:	4b95      	ldr	r3, [pc, #596]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003436:	2300      	movs	r3, #0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00d      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343c:	4b8f      	ldr	r3, [pc, #572]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	4a8e      	ldr	r2, [pc, #568]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003446:	6593      	str	r3, [r2, #88]	; 0x58
 8003448:	4b8c      	ldr	r3, [pc, #560]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003454:	2301      	movs	r3, #1
 8003456:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003458:	4b89      	ldr	r3, [pc, #548]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a88      	ldr	r2, [pc, #544]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800345e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003462:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003464:	f7fe f9ce 	bl	8001804 <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800346a:	e009      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346c:	f7fe f9ca 	bl	8001804 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d902      	bls.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	74fb      	strb	r3, [r7, #19]
        break;
 800347e:	e005      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003480:	4b7f      	ldr	r3, [pc, #508]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ef      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d155      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003492:	4b7a      	ldr	r3, [pc, #488]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01e      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d019      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034ae:	4b73      	ldr	r3, [pc, #460]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034ba:	4b70      	ldr	r3, [pc, #448]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	4a6e      	ldr	r2, [pc, #440]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034ca:	4b6c      	ldr	r3, [pc, #432]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d0:	4a6a      	ldr	r2, [pc, #424]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034da:	4a68      	ldr	r2, [pc, #416]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d016      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe f98a 	bl	8001804 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f2:	e00b      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f4:	f7fe f986 	bl	8001804 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d902      	bls.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	74fb      	strb	r3, [r7, #19]
            break;
 800350a:	e006      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350c:	4b5b      	ldr	r3, [pc, #364]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0ec      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10b      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003520:	4b56      	ldr	r3, [pc, #344]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352e:	4953      	ldr	r1, [pc, #332]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003536:	e004      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	74bb      	strb	r3, [r7, #18]
 800353c:	e001      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353e:	7cfb      	ldrb	r3, [r7, #19]
 8003540:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003542:	7c7b      	ldrb	r3, [r7, #17]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003548:	4b4c      	ldr	r3, [pc, #304]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800354a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354c:	4a4b      	ldr	r2, [pc, #300]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800354e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003552:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003560:	4b46      	ldr	r3, [pc, #280]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f023 0203 	bic.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4943      	ldr	r1, [pc, #268]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003582:	4b3e      	ldr	r3, [pc, #248]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	f023 020c 	bic.w	r2, r3, #12
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	493a      	ldr	r1, [pc, #232]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035a4:	4b35      	ldr	r3, [pc, #212]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	4932      	ldr	r1, [pc, #200]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035c6:	4b2d      	ldr	r3, [pc, #180]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d4:	4929      	ldr	r1, [pc, #164]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035e8:	4b24      	ldr	r3, [pc, #144]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	4921      	ldr	r1, [pc, #132]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800360a:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	4918      	ldr	r1, [pc, #96]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800362c:	4b13      	ldr	r3, [pc, #76]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	4910      	ldr	r1, [pc, #64]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d02c      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800364e:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	4907      	ldr	r1, [pc, #28]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800366c:	d10a      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366e:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	4a02      	ldr	r2, [pc, #8]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003678:	60d3      	str	r3, [r2, #12]
 800367a:	e015      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800367c:	40021000 	.word	0x40021000
 8003680:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800368c:	d10c      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3304      	adds	r3, #4
 8003692:	2101      	movs	r1, #1
 8003694:	4618      	mov	r0, r3
 8003696:	f000 f871 	bl	800377c <RCCEx_PLLSAI1_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d028      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b4:	4b30      	ldr	r3, [pc, #192]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	492d      	ldr	r1, [pc, #180]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d2:	d106      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d4:	4b28      	ldr	r3, [pc, #160]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a27      	ldr	r2, [pc, #156]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036de:	60d3      	str	r3, [r2, #12]
 80036e0:	e011      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ea:	d10c      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	2101      	movs	r1, #1
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f842 	bl	800377c <RCCEx_PLLSAI1_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8003702:	7cfb      	ldrb	r3, [r7, #19]
 8003704:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d01c      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003712:	4b19      	ldr	r3, [pc, #100]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003720:	4915      	ldr	r1, [pc, #84]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003730:	d10c      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3304      	adds	r3, #4
 8003736:	2102      	movs	r1, #2
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f81f 	bl	800377c <RCCEx_PLLSAI1_Config>
 800373e:	4603      	mov	r3, r0
 8003740:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003758:	4b07      	ldr	r3, [pc, #28]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003766:	4904      	ldr	r1, [pc, #16]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800376e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000

0800377c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800378a:	4b73      	ldr	r3, [pc, #460]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d018      	beq.n	80037c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003796:	4b70      	ldr	r3, [pc, #448]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0203 	and.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d10d      	bne.n	80037c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
       ||
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037ae:	4b6a      	ldr	r3, [pc, #424]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
       ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d044      	beq.n	800384c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	e041      	b.n	800384c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d00c      	beq.n	80037ea <RCCEx_PLLSAI1_Config+0x6e>
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d013      	beq.n	80037fc <RCCEx_PLLSAI1_Config+0x80>
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d120      	bne.n	800381a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037d8:	4b5f      	ldr	r3, [pc, #380]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d11d      	bne.n	8003820 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e8:	e01a      	b.n	8003820 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037ea:	4b5b      	ldr	r3, [pc, #364]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d116      	bne.n	8003824 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037fa:	e013      	b.n	8003824 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037fc:	4b56      	ldr	r3, [pc, #344]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10f      	bne.n	8003828 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003808:	4b53      	ldr	r3, [pc, #332]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d109      	bne.n	8003828 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003818:	e006      	b.n	8003828 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
      break;
 800381e:	e004      	b.n	800382a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003820:	bf00      	nop
 8003822:	e002      	b.n	800382a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003824:	bf00      	nop
 8003826:	e000      	b.n	800382a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003828:	bf00      	nop
    }

    if(status == HAL_OK)
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10d      	bne.n	800384c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003830:	4b49      	ldr	r3, [pc, #292]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6819      	ldr	r1, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	3b01      	subs	r3, #1
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	430b      	orrs	r3, r1
 8003846:	4944      	ldr	r1, [pc, #272]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d17c      	bne.n	800394c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003852:	4b41      	ldr	r3, [pc, #260]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a40      	ldr	r2, [pc, #256]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003858:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800385c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800385e:	f7fd ffd1 	bl	8001804 <HAL_GetTick>
 8003862:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003864:	e009      	b.n	800387a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003866:	f7fd ffcd 	bl	8001804 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d902      	bls.n	800387a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	73fb      	strb	r3, [r7, #15]
        break;
 8003878:	e005      	b.n	8003886 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800387a:	4b37      	ldr	r3, [pc, #220]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1ef      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d15f      	bne.n	800394c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d110      	bne.n	80038b4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003892:	4b31      	ldr	r3, [pc, #196]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800389a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6892      	ldr	r2, [r2, #8]
 80038a2:	0211      	lsls	r1, r2, #8
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	68d2      	ldr	r2, [r2, #12]
 80038a8:	06d2      	lsls	r2, r2, #27
 80038aa:	430a      	orrs	r2, r1
 80038ac:	492a      	ldr	r1, [pc, #168]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	610b      	str	r3, [r1, #16]
 80038b2:	e027      	b.n	8003904 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d112      	bne.n	80038e0 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ba:	4b27      	ldr	r3, [pc, #156]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6892      	ldr	r2, [r2, #8]
 80038ca:	0211      	lsls	r1, r2, #8
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6912      	ldr	r2, [r2, #16]
 80038d0:	0852      	lsrs	r2, r2, #1
 80038d2:	3a01      	subs	r2, #1
 80038d4:	0552      	lsls	r2, r2, #21
 80038d6:	430a      	orrs	r2, r1
 80038d8:	491f      	ldr	r1, [pc, #124]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	610b      	str	r3, [r1, #16]
 80038de:	e011      	b.n	8003904 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e0:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6892      	ldr	r2, [r2, #8]
 80038f0:	0211      	lsls	r1, r2, #8
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6952      	ldr	r2, [r2, #20]
 80038f6:	0852      	lsrs	r2, r2, #1
 80038f8:	3a01      	subs	r2, #1
 80038fa:	0652      	lsls	r2, r2, #25
 80038fc:	430a      	orrs	r2, r1
 80038fe:	4916      	ldr	r1, [pc, #88]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003904:	4b14      	ldr	r3, [pc, #80]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a13      	ldr	r2, [pc, #76]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 800390a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800390e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fd ff78 	bl	8001804 <HAL_GetTick>
 8003914:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003916:	e009      	b.n	800392c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003918:	f7fd ff74 	bl	8001804 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d902      	bls.n	800392c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	73fb      	strb	r3, [r7, #15]
          break;
 800392a:	e005      	b.n	8003938 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0ef      	beq.n	8003918 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	4904      	ldr	r1, [pc, #16]	; (8003958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003948:	4313      	orrs	r3, r2
 800394a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000

0800395c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07c      	b.n	8003a68 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fd f9a9 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2202      	movs	r2, #2
 8003992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039ae:	d902      	bls.n	80039b6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	e002      	b.n	80039bc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039c4:	d007      	beq.n	80039d6 <HAL_SPI_Init+0x7a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039ce:	d002      	beq.n	80039d6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10b      	bne.n	80039f6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039e6:	d903      	bls.n	80039f0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
 80039ee:	e002      	b.n	80039f6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	ea42 0103 	orr.w	r1, r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	f003 0204 	and.w	r2, r3, #4
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	ea42 0103 	orr.w	r1, r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e01d      	b.n	8003abe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd fc9a 	bl	80013d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4619      	mov	r1, r3
 8003aae:	4610      	mov	r0, r2
 8003ab0:	f000 f994 	bl	8003ddc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e01d      	b.n	8003b14 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f815 	bl	8003b1c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f000 f969 	bl	8003ddc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_TIM_IC_ConfigChannel+0x1a>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e08a      	b.n	8003c60 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2202      	movs	r2, #2
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11b      	bne.n	8003b98 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f000 f998 	bl	8003ea4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 020c 	bic.w	r2, r2, #12
 8003b82:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6999      	ldr	r1, [r3, #24]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	619a      	str	r2, [r3, #24]
 8003b96:	e05a      	b.n	8003c4e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d11c      	bne.n	8003bd8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	6819      	ldr	r1, [r3, #0]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f000 f9fe 	bl	8003fae <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699a      	ldr	r2, [r3, #24]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003bc0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6999      	ldr	r1, [r3, #24]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	021a      	lsls	r2, r3, #8
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	619a      	str	r2, [r3, #24]
 8003bd6:	e03a      	b.n	8003c4e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d11b      	bne.n	8003c16 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	6819      	ldr	r1, [r3, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f000 fa4b 	bl	8004088 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 020c 	bic.w	r2, r2, #12
 8003c00:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69d9      	ldr	r1, [r3, #28]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	61da      	str	r2, [r3, #28]
 8003c14:	e01b      	b.n	8003c4e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f000 fa6b 	bl	8004100 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69da      	ldr	r2, [r3, #28]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c38:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69d9      	ldr	r1, [r3, #28]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	021a      	lsls	r2, r3, #8
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIM_ConfigClockSource+0x18>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e0a8      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16a>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ca2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003caa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d067      	beq.n	8003d8c <HAL_TIM_ConfigClockSource+0x124>
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d80b      	bhi.n	8003cd8 <HAL_TIM_ConfigClockSource+0x70>
 8003cc0:	2b10      	cmp	r3, #16
 8003cc2:	d073      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0x144>
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d802      	bhi.n	8003cce <HAL_TIM_ConfigClockSource+0x66>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d06f      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003ccc:	e078      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	d06c      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0x144>
 8003cd2:	2b30      	cmp	r3, #48	; 0x30
 8003cd4:	d06a      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003cd6:	e073      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003cd8:	2b70      	cmp	r3, #112	; 0x70
 8003cda:	d00d      	beq.n	8003cf8 <HAL_TIM_ConfigClockSource+0x90>
 8003cdc:	2b70      	cmp	r3, #112	; 0x70
 8003cde:	d804      	bhi.n	8003cea <HAL_TIM_ConfigClockSource+0x82>
 8003ce0:	2b50      	cmp	r3, #80	; 0x50
 8003ce2:	d033      	beq.n	8003d4c <HAL_TIM_ConfigClockSource+0xe4>
 8003ce4:	2b60      	cmp	r3, #96	; 0x60
 8003ce6:	d041      	beq.n	8003d6c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003ce8:	e06a      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cee:	d066      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x156>
 8003cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf4:	d017      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003cf6:	e063      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	6899      	ldr	r1, [r3, #8]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f000 fa52 	bl	80041b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	609a      	str	r2, [r3, #8]
      break;
 8003d24:	e04c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6899      	ldr	r1, [r3, #8]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f000 fa3b 	bl	80041b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d48:	609a      	str	r2, [r3, #8]
      break;
 8003d4a:	e039      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f000 f8f9 	bl	8003f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2150      	movs	r1, #80	; 0x50
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fa08 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003d6a:	e029      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	6859      	ldr	r1, [r3, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f000 f955 	bl	8004028 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2160      	movs	r1, #96	; 0x60
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 f9f8 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003d8a:	e019      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f000 f8d9 	bl	8003f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2140      	movs	r1, #64	; 0x40
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 f9e8 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003daa:	e009      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f000 f9df 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003dbc:	e000      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <TIM_Base_SetConfig+0xbc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_Base_SetConfig+0x20>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfa:	d108      	bne.n	8003e0e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a21      	ldr	r2, [pc, #132]	; (8003e98 <TIM_Base_SetConfig+0xbc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00b      	beq.n	8003e2e <TIM_Base_SetConfig+0x52>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1c:	d007      	beq.n	8003e2e <TIM_Base_SetConfig+0x52>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <TIM_Base_SetConfig+0xc0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d003      	beq.n	8003e2e <TIM_Base_SetConfig+0x52>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a1d      	ldr	r2, [pc, #116]	; (8003ea0 <TIM_Base_SetConfig+0xc4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d108      	bne.n	8003e40 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0c      	ldr	r2, [pc, #48]	; (8003e98 <TIM_Base_SetConfig+0xbc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d007      	beq.n	8003e7c <TIM_Base_SetConfig+0xa0>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a0b      	ldr	r2, [pc, #44]	; (8003e9c <TIM_Base_SetConfig+0xc0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_Base_SetConfig+0xa0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <TIM_Base_SetConfig+0xc4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d103      	bne.n	8003e84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	615a      	str	r2, [r3, #20]
}
 8003e8a:	bf00      	nop
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40014400 	.word	0x40014400

08003ea4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	f023 0201 	bic.w	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <TIM_TI1_SetConfig+0xa4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <TIM_TI1_SetConfig+0x3e>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed8:	d003      	beq.n	8003ee2 <TIM_TI1_SetConfig+0x3e>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4a1b      	ldr	r2, [pc, #108]	; (8003f4c <TIM_TI1_SetConfig+0xa8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d101      	bne.n	8003ee6 <TIM_TI1_SetConfig+0x42>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <TIM_TI1_SetConfig+0x44>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f023 0303 	bic.w	r3, r3, #3
 8003ef2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	e003      	b.n	8003f06 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f023 030a 	bic.w	r3, r3, #10
 8003f20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f003 030a 	and.w	r3, r3, #10
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	621a      	str	r2, [r3, #32]
}
 8003f3a:	bf00      	nop
 8003f3c:	371c      	adds	r7, #28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40014000 	.word	0x40014000

08003f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f023 030a 	bic.w	r3, r3, #10
 8003f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	621a      	str	r2, [r3, #32]
}
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b087      	sub	sp, #28
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
 8003fba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f023 0210 	bic.w	r2, r3, #16
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	031b      	lsls	r3, r3, #12
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004000:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	621a      	str	r2, [r3, #32]
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f023 0210 	bic.w	r2, r3, #16
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004052:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	031b      	lsls	r3, r3, #12
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004064:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	621a      	str	r2, [r3, #32]
}
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f023 0303 	bic.w	r3, r3, #3
 80040b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80040d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	621a      	str	r2, [r3, #32]
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800413e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	031b      	lsls	r3, r3, #12
 8004144:	b29b      	uxth	r3, r3
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004152:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	031b      	lsls	r3, r3, #12
 8004158:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	f043 0307 	orr.w	r3, r3, #7
 800419c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	021a      	lsls	r2, r3, #8
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	609a      	str	r2, [r3, #8]
}
 80041e4:	bf00      	nop
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004204:	2302      	movs	r3, #2
 8004206:	e04f      	b.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d108      	bne.n	8004244 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004238:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a14      	ldr	r2, [pc, #80]	; (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d009      	beq.n	800427c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004270:	d004      	beq.n	800427c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a10      	ldr	r2, [pc, #64]	; (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d10c      	bne.n	8004296 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004282:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	4313      	orrs	r3, r2
 800428c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40014000 	.word	0x40014000

080042bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e040      	b.n	8004350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fd f942 	bl	8001568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2224      	movs	r2, #36	; 0x24
 80042e8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f82c 	bl	8004358 <UART_SetConfig>
 8004300:	4603      	mov	r3, r0
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e022      	b.n	8004350 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fb06 	bl	8004924 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fb8d 	bl	8004a68 <UART_CheckIdleState>
 800434e:	4603      	mov	r3, r0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004358:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800435c:	b08a      	sub	sp, #40	; 0x28
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	4313      	orrs	r3, r2
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	4bb3      	ldr	r3, [pc, #716]	; (800465c <UART_SetConfig+0x304>)
 800438e:	4013      	ands	r3, r2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004396:	430b      	orrs	r3, r1
 8004398:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4aa9      	ldr	r2, [pc, #676]	; (8004660 <UART_SetConfig+0x308>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c6:	4313      	orrs	r3, r2
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043da:	430a      	orrs	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4aa0      	ldr	r2, [pc, #640]	; (8004664 <UART_SetConfig+0x30c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d126      	bne.n	8004436 <UART_SetConfig+0xde>
 80043e8:	4b9f      	ldr	r3, [pc, #636]	; (8004668 <UART_SetConfig+0x310>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d81a      	bhi.n	800442c <UART_SetConfig+0xd4>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <UART_SetConfig+0xa4>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	0800440d 	.word	0x0800440d
 8004400:	0800441d 	.word	0x0800441d
 8004404:	08004415 	.word	0x08004415
 8004408:	08004425 	.word	0x08004425
 800440c:	2301      	movs	r3, #1
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e080      	b.n	8004516 <UART_SetConfig+0x1be>
 8004414:	2302      	movs	r3, #2
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e07c      	b.n	8004516 <UART_SetConfig+0x1be>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004422:	e078      	b.n	8004516 <UART_SetConfig+0x1be>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442a:	e074      	b.n	8004516 <UART_SetConfig+0x1be>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004432:	bf00      	nop
 8004434:	e06f      	b.n	8004516 <UART_SetConfig+0x1be>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a8c      	ldr	r2, [pc, #560]	; (800466c <UART_SetConfig+0x314>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d138      	bne.n	80044b2 <UART_SetConfig+0x15a>
 8004440:	4b89      	ldr	r3, [pc, #548]	; (8004668 <UART_SetConfig+0x310>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d82c      	bhi.n	80044a8 <UART_SetConfig+0x150>
 800444e:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <UART_SetConfig+0xfc>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004489 	.word	0x08004489
 8004458:	080044a9 	.word	0x080044a9
 800445c:	080044a9 	.word	0x080044a9
 8004460:	080044a9 	.word	0x080044a9
 8004464:	08004499 	.word	0x08004499
 8004468:	080044a9 	.word	0x080044a9
 800446c:	080044a9 	.word	0x080044a9
 8004470:	080044a9 	.word	0x080044a9
 8004474:	08004491 	.word	0x08004491
 8004478:	080044a9 	.word	0x080044a9
 800447c:	080044a9 	.word	0x080044a9
 8004480:	080044a9 	.word	0x080044a9
 8004484:	080044a1 	.word	0x080044a1
 8004488:	2300      	movs	r3, #0
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448e:	e042      	b.n	8004516 <UART_SetConfig+0x1be>
 8004490:	2302      	movs	r3, #2
 8004492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004496:	e03e      	b.n	8004516 <UART_SetConfig+0x1be>
 8004498:	2304      	movs	r3, #4
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449e:	e03a      	b.n	8004516 <UART_SetConfig+0x1be>
 80044a0:	2308      	movs	r3, #8
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a6:	e036      	b.n	8004516 <UART_SetConfig+0x1be>
 80044a8:	2310      	movs	r3, #16
 80044aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ae:	bf00      	nop
 80044b0:	e031      	b.n	8004516 <UART_SetConfig+0x1be>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a6a      	ldr	r2, [pc, #424]	; (8004660 <UART_SetConfig+0x308>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d129      	bne.n	8004510 <UART_SetConfig+0x1b8>
 80044bc:	4b6a      	ldr	r3, [pc, #424]	; (8004668 <UART_SetConfig+0x310>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ca:	d014      	beq.n	80044f6 <UART_SetConfig+0x19e>
 80044cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d0:	d802      	bhi.n	80044d8 <UART_SetConfig+0x180>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <UART_SetConfig+0x18e>
 80044d6:	e016      	b.n	8004506 <UART_SetConfig+0x1ae>
 80044d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044dc:	d007      	beq.n	80044ee <UART_SetConfig+0x196>
 80044de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044e2:	d00c      	beq.n	80044fe <UART_SetConfig+0x1a6>
 80044e4:	e00f      	b.n	8004506 <UART_SetConfig+0x1ae>
 80044e6:	2300      	movs	r3, #0
 80044e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ec:	e013      	b.n	8004516 <UART_SetConfig+0x1be>
 80044ee:	2302      	movs	r3, #2
 80044f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f4:	e00f      	b.n	8004516 <UART_SetConfig+0x1be>
 80044f6:	2304      	movs	r3, #4
 80044f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fc:	e00b      	b.n	8004516 <UART_SetConfig+0x1be>
 80044fe:	2308      	movs	r3, #8
 8004500:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004504:	e007      	b.n	8004516 <UART_SetConfig+0x1be>
 8004506:	2310      	movs	r3, #16
 8004508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450c:	bf00      	nop
 800450e:	e002      	b.n	8004516 <UART_SetConfig+0x1be>
 8004510:	2310      	movs	r3, #16
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a51      	ldr	r2, [pc, #324]	; (8004660 <UART_SetConfig+0x308>)
 800451c:	4293      	cmp	r3, r2
 800451e:	f040 80fa 	bne.w	8004716 <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004526:	2b08      	cmp	r3, #8
 8004528:	d823      	bhi.n	8004572 <UART_SetConfig+0x21a>
 800452a:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <UART_SetConfig+0x1d8>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	08004555 	.word	0x08004555
 8004534:	08004573 	.word	0x08004573
 8004538:	0800455d 	.word	0x0800455d
 800453c:	08004573 	.word	0x08004573
 8004540:	08004563 	.word	0x08004563
 8004544:	08004573 	.word	0x08004573
 8004548:	08004573 	.word	0x08004573
 800454c:	08004573 	.word	0x08004573
 8004550:	0800456b 	.word	0x0800456b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004554:	f7fe fe94 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8004558:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800455a:	e00d      	b.n	8004578 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800455c:	4b44      	ldr	r3, [pc, #272]	; (8004670 <UART_SetConfig+0x318>)
 800455e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004560:	e00a      	b.n	8004578 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004562:	f7fe fdf7 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8004566:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004568:	e006      	b.n	8004578 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800456a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004570:	e002      	b.n	8004578 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	76fb      	strb	r3, [r7, #27]
        break;
 8004576:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 81c6 	beq.w	800490c <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	4413      	add	r3, r2
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	429a      	cmp	r2, r3
 800458e:	d305      	bcc.n	800459c <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	429a      	cmp	r2, r3
 800459a:	d902      	bls.n	80045a2 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	76fb      	strb	r3, [r7, #27]
 80045a0:	e1b4      	b.n	800490c <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 80045a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	f200 80a2 	bhi.w	80046f0 <UART_SetConfig+0x398>
 80045ac:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <UART_SetConfig+0x25c>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	080045d9 	.word	0x080045d9
 80045b8:	080046f1 	.word	0x080046f1
 80045bc:	08004627 	.word	0x08004627
 80045c0:	080046f1 	.word	0x080046f1
 80045c4:	08004679 	.word	0x08004679
 80045c8:	080046f1 	.word	0x080046f1
 80045cc:	080046f1 	.word	0x080046f1
 80045d0:	080046f1 	.word	0x080046f1
 80045d4:	080046c7 	.word	0x080046c7
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80045d8:	f7fe fe52 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 80045dc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4619      	mov	r1, r3
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	f04f 0300 	mov.w	r3, #0
 80045ea:	f04f 0400 	mov.w	r4, #0
 80045ee:	0214      	lsls	r4, r2, #8
 80045f0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80045f4:	020b      	lsls	r3, r1, #8
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6852      	ldr	r2, [r2, #4]
 80045fa:	0852      	lsrs	r2, r2, #1
 80045fc:	4611      	mov	r1, r2
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	eb13 0b01 	adds.w	fp, r3, r1
 8004606:	eb44 0c02 	adc.w	ip, r4, r2
 800460a:	4658      	mov	r0, fp
 800460c:	4661      	mov	r1, ip
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f04f 0400 	mov.w	r4, #0
 8004616:	461a      	mov	r2, r3
 8004618:	4623      	mov	r3, r4
 800461a:	f7fb fdd7 	bl	80001cc <__aeabi_uldivmod>
 800461e:	4603      	mov	r3, r0
 8004620:	460c      	mov	r4, r1
 8004622:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004624:	e067      	b.n	80046f6 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	f04f 0400 	mov.w	r4, #0
 8004630:	4910      	ldr	r1, [pc, #64]	; (8004674 <UART_SetConfig+0x31c>)
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	eb13 0b01 	adds.w	fp, r3, r1
 800463a:	eb44 0c02 	adc.w	ip, r4, r2
 800463e:	4658      	mov	r0, fp
 8004640:	4661      	mov	r1, ip
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f04f 0400 	mov.w	r4, #0
 800464a:	461a      	mov	r2, r3
 800464c:	4623      	mov	r3, r4
 800464e:	f7fb fdbd 	bl	80001cc <__aeabi_uldivmod>
 8004652:	4603      	mov	r3, r0
 8004654:	460c      	mov	r4, r1
 8004656:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004658:	e04d      	b.n	80046f6 <UART_SetConfig+0x39e>
 800465a:	bf00      	nop
 800465c:	efff69f3 	.word	0xefff69f3
 8004660:	40008000 	.word	0x40008000
 8004664:	40013800 	.word	0x40013800
 8004668:	40021000 	.word	0x40021000
 800466c:	40004400 	.word	0x40004400
 8004670:	00f42400 	.word	0x00f42400
 8004674:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004678:	f7fe fd6c 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 800467c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4619      	mov	r1, r3
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	f04f 0400 	mov.w	r4, #0
 800468e:	0214      	lsls	r4, r2, #8
 8004690:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004694:	020b      	lsls	r3, r1, #8
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6852      	ldr	r2, [r2, #4]
 800469a:	0852      	lsrs	r2, r2, #1
 800469c:	4611      	mov	r1, r2
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	eb13 0b01 	adds.w	fp, r3, r1
 80046a6:	eb44 0c02 	adc.w	ip, r4, r2
 80046aa:	4658      	mov	r0, fp
 80046ac:	4661      	mov	r1, ip
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f04f 0400 	mov.w	r4, #0
 80046b6:	461a      	mov	r2, r3
 80046b8:	4623      	mov	r3, r4
 80046ba:	f7fb fd87 	bl	80001cc <__aeabi_uldivmod>
 80046be:	4603      	mov	r3, r0
 80046c0:	460c      	mov	r4, r1
 80046c2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80046c4:	e017      	b.n	80046f6 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	085b      	lsrs	r3, r3, #1
 80046cc:	f04f 0400 	mov.w	r4, #0
 80046d0:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80046d4:	f144 0100 	adc.w	r1, r4, #0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f04f 0400 	mov.w	r4, #0
 80046e0:	461a      	mov	r2, r3
 80046e2:	4623      	mov	r3, r4
 80046e4:	f7fb fd72 	bl	80001cc <__aeabi_uldivmod>
 80046e8:	4603      	mov	r3, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80046ee:	e002      	b.n	80046f6 <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	76fb      	strb	r3, [r7, #27]
            break;
 80046f4:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046fc:	d308      	bcc.n	8004710 <UART_SetConfig+0x3b8>
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004704:	d204      	bcs.n	8004710 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	e0fd      	b.n	800490c <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	76fb      	strb	r3, [r7, #27]
 8004714:	e0fa      	b.n	800490c <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471e:	f040 8083 	bne.w	8004828 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8004722:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004726:	2b08      	cmp	r3, #8
 8004728:	d85e      	bhi.n	80047e8 <UART_SetConfig+0x490>
 800472a:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <UART_SetConfig+0x3d8>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004755 	.word	0x08004755
 8004734:	08004775 	.word	0x08004775
 8004738:	08004795 	.word	0x08004795
 800473c:	080047e9 	.word	0x080047e9
 8004740:	080047b1 	.word	0x080047b1
 8004744:	080047e9 	.word	0x080047e9
 8004748:	080047e9 	.word	0x080047e9
 800474c:	080047e9 	.word	0x080047e9
 8004750:	080047d1 	.word	0x080047d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004754:	f7fe fd94 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8004758:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	005a      	lsls	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	085b      	lsrs	r3, r3, #1
 8004764:	441a      	add	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	fbb2 f3f3 	udiv	r3, r2, r3
 800476e:	b29b      	uxth	r3, r3
 8004770:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004772:	e03c      	b.n	80047ee <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004774:	f7fe fd9a 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 8004778:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	005a      	lsls	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	085b      	lsrs	r3, r3, #1
 8004784:	441a      	add	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	fbb2 f3f3 	udiv	r3, r2, r3
 800478e:	b29b      	uxth	r3, r3
 8004790:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004792:	e02c      	b.n	80047ee <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800479e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6852      	ldr	r2, [r2, #4]
 80047a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047ae:	e01e      	b.n	80047ee <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b0:	f7fe fcd0 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 80047b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	005a      	lsls	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	441a      	add	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047ce:	e00e      	b.n	80047ee <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047e6:	e002      	b.n	80047ee <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	76fb      	strb	r3, [r7, #27]
        break;
 80047ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	2b0f      	cmp	r3, #15
 80047f2:	d916      	bls.n	8004822 <UART_SetConfig+0x4ca>
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fa:	d212      	bcs.n	8004822 <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f023 030f 	bic.w	r3, r3, #15
 8004804:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	085b      	lsrs	r3, r3, #1
 800480a:	b29b      	uxth	r3, r3
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	b29a      	uxth	r2, r3
 8004812:	89fb      	ldrh	r3, [r7, #14]
 8004814:	4313      	orrs	r3, r2
 8004816:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	89fa      	ldrh	r2, [r7, #14]
 800481e:	60da      	str	r2, [r3, #12]
 8004820:	e074      	b.n	800490c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	76fb      	strb	r3, [r7, #27]
 8004826:	e071      	b.n	800490c <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8004828:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800482c:	2b08      	cmp	r3, #8
 800482e:	d85c      	bhi.n	80048ea <UART_SetConfig+0x592>
 8004830:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <UART_SetConfig+0x4e0>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	0800485d 	.word	0x0800485d
 800483c:	0800487b 	.word	0x0800487b
 8004840:	08004899 	.word	0x08004899
 8004844:	080048eb 	.word	0x080048eb
 8004848:	080048b5 	.word	0x080048b5
 800484c:	080048eb 	.word	0x080048eb
 8004850:	080048eb 	.word	0x080048eb
 8004854:	080048eb 	.word	0x080048eb
 8004858:	080048d3 	.word	0x080048d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800485c:	f7fe fd10 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8004860:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	085a      	lsrs	r2, r3, #1
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	441a      	add	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	b29b      	uxth	r3, r3
 8004876:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004878:	e03a      	b.n	80048f0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800487a:	f7fe fd17 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 800487e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	085a      	lsrs	r2, r3, #1
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	441a      	add	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004892:	b29b      	uxth	r3, r3
 8004894:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004896:	e02b      	b.n	80048f0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80048a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6852      	ldr	r2, [r2, #4]
 80048aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048b2:	e01d      	b.n	80048f0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b4:	f7fe fc4e 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 80048b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	085a      	lsrs	r2, r3, #1
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	441a      	add	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048d0:	e00e      	b.n	80048f0 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	085b      	lsrs	r3, r3, #1
 80048d8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048e8:	e002      	b.n	80048f0 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	76fb      	strb	r3, [r7, #27]
        break;
 80048ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	2b0f      	cmp	r3, #15
 80048f4:	d908      	bls.n	8004908 <UART_SetConfig+0x5b0>
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d204      	bcs.n	8004908 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69fa      	ldr	r2, [r7, #28]
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	e001      	b.n	800490c <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004918:	7efb      	ldrb	r3, [r7, #27]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3728      	adds	r7, #40	; 0x28
 800491e:	46bd      	mov	sp, r7
 8004920:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01a      	beq.n	8004a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a22:	d10a      	bne.n	8004a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a76:	f7fc fec5 	bl	8001804 <HAL_GetTick>
 8004a7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d10e      	bne.n	8004aa8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f82a 	bl	8004af2 <UART_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e020      	b.n	8004aea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d10e      	bne.n	8004ad4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f814 	bl	8004af2 <UART_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e00a      	b.n	8004aea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	603b      	str	r3, [r7, #0]
 8004afe:	4613      	mov	r3, r2
 8004b00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b02:	e05d      	b.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b0a:	d059      	beq.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0c:	f7fc fe7a 	bl	8001804 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d302      	bcc.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d11b      	bne.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b30:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e042      	b.n	8004be0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d02b      	beq.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b76:	d123      	bne.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b80:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b90:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e00f      	b.n	8004be0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69da      	ldr	r2, [r3, #28]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d092      	beq.n	8004b04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <__libc_init_array>:
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	4e0d      	ldr	r6, [pc, #52]	; (8004c20 <__libc_init_array+0x38>)
 8004bec:	4c0d      	ldr	r4, [pc, #52]	; (8004c24 <__libc_init_array+0x3c>)
 8004bee:	1ba4      	subs	r4, r4, r6
 8004bf0:	10a4      	asrs	r4, r4, #2
 8004bf2:	2500      	movs	r5, #0
 8004bf4:	42a5      	cmp	r5, r4
 8004bf6:	d109      	bne.n	8004c0c <__libc_init_array+0x24>
 8004bf8:	4e0b      	ldr	r6, [pc, #44]	; (8004c28 <__libc_init_array+0x40>)
 8004bfa:	4c0c      	ldr	r4, [pc, #48]	; (8004c2c <__libc_init_array+0x44>)
 8004bfc:	f000 f820 	bl	8004c40 <_init>
 8004c00:	1ba4      	subs	r4, r4, r6
 8004c02:	10a4      	asrs	r4, r4, #2
 8004c04:	2500      	movs	r5, #0
 8004c06:	42a5      	cmp	r5, r4
 8004c08:	d105      	bne.n	8004c16 <__libc_init_array+0x2e>
 8004c0a:	bd70      	pop	{r4, r5, r6, pc}
 8004c0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c10:	4798      	blx	r3
 8004c12:	3501      	adds	r5, #1
 8004c14:	e7ee      	b.n	8004bf4 <__libc_init_array+0xc>
 8004c16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c1a:	4798      	blx	r3
 8004c1c:	3501      	adds	r5, #1
 8004c1e:	e7f2      	b.n	8004c06 <__libc_init_array+0x1e>
 8004c20:	08004ca8 	.word	0x08004ca8
 8004c24:	08004ca8 	.word	0x08004ca8
 8004c28:	08004ca8 	.word	0x08004ca8
 8004c2c:	08004cac 	.word	0x08004cac

08004c30 <memset>:
 8004c30:	4402      	add	r2, r0
 8004c32:	4603      	mov	r3, r0
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d100      	bne.n	8004c3a <memset+0xa>
 8004c38:	4770      	bx	lr
 8004c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c3e:	e7f9      	b.n	8004c34 <memset+0x4>

08004c40 <_init>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	bf00      	nop
 8004c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c46:	bc08      	pop	{r3}
 8004c48:	469e      	mov	lr, r3
 8004c4a:	4770      	bx	lr

08004c4c <_fini>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	bf00      	nop
 8004c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c52:	bc08      	pop	{r3}
 8004c54:	469e      	mov	lr, r3
 8004c56:	4770      	bx	lr
